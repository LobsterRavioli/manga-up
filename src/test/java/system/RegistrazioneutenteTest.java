package system;// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.JavascriptExecutor;

import java.util.*;

public class RegistrazioneutenteTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    driver = new ChromeDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void tC1() {
    // Test name: TC_1
    // Step # | name | target | value
    // 1 | open | http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp | 
    driver.get("http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp");
    // 2 | setWindowSize | 1200x1288 | 
    driver.manage().window().setSize(new Dimension(1200, 1288));
    // 3 | type | id=email | tommyrock99@hotmail.t
    driver.findElement(By.id("email")).sendKeys("tommyrock99@hotmail.t");
    // 4 | type | id=password | password1!
    driver.findElement(By.id("password")).sendKeys("password1!");
    // 5 | type | id=psw-repeat | password1!
    driver.findElement(By.id("psw-repeat")).sendKeys("password1!");
    // 6 | type | id=name | Tommaso
    driver.findElement(By.id("name")).sendKeys("Tommaso");
    // 7 | type | id=surname | Sorrentino
    driver.findElement(By.id("surname")).sendKeys("Sorrentino");
    // 8 | type | id=phone_number | 1234567812346
    driver.findElement(By.id("phone_number")).sendKeys("1234567812346");
    // 9 | type | id=card_number | 1234567891234
    driver.findElement(By.id("card_number")).sendKeys("1234567891234");
    // 10 | type | id=expirement_date | 2005-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("2005-05-16");
    // 11 | type | id=expirement_date | 2027-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("2027-05-16");
    // 12 | type | id=cvc | 1111
    driver.findElement(By.id("cvc")).sendKeys("1111");
    // 13 | type | id=card_holder | Tommaso Sorrentino
    driver.findElement(By.id("card_holder")).sendKeys("Tommaso Sorrentino");
    // 14 | type | id=street | Via lince 35
    driver.findElement(By.id("street")).sendKeys("Via lince 35");
    // 15 | type | id=country | Italia
    driver.findElement(By.id("country")).sendKeys("Italia");
    // 16 | type | id=region | Campania
    driver.findElement(By.id("region")).sendKeys("Campania");
    // 17 | type | id=city | Napoli
    driver.findElement(By.id("city")).sendKeys("Napoli");
    // 18 | type | id=phone_number_address | 1234567812346
    driver.findElement(By.id("phone_number_address")).sendKeys("1234567812346");
    // 19 | type | id=postal_code | 80040
    driver.findElement(By.id("postal_code")).sendKeys("80040");
    // 20 | type | id=birth_date | 2025-02-16
    driver.findElement(By.id("birth_date")).sendKeys("2025-02-16");
    // 21 | click | css=.fry | 
    driver.findElement(By.cssSelector(".fry")).click();
    // 22 | assertTitle | HomePage | 
    assertThat(driver.getTitle(), is("HomePage"));
  }
  @Test
  public void tC2() {
    // Test name: TC_2
    // Step # | name | target | value
    // 1 | open | http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp | 
    driver.get("http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp");
    // 2 | setWindowSize | 1200x1288 | 
    driver.manage().window().setSize(new Dimension(1200, 1288));
    // 3 | type | id=email | 123
    driver.findElement(By.id("email")).sendKeys("123");
    // 4 | type | id=password | password1!
    driver.findElement(By.id("password")).sendKeys("password1!");
    // 5 | type | id=psw-repeat | password1!
    driver.findElement(By.id("psw-repeat")).sendKeys("password1!");
    // 6 | type | id=name | Tommaso
    driver.findElement(By.id("name")).sendKeys("Tommaso");
    // 7 | type | id=surname | Sorrentino
    driver.findElement(By.id("surname")).sendKeys("Sorrentino");
    // 8 | type | id=phone_number | 1234567812346
    driver.findElement(By.id("phone_number")).sendKeys("1234567812346");
    // 9 | type | id=card_number | 1234567891234
    driver.findElement(By.id("card_number")).sendKeys("1234567891234");
    // 10 | type | id=expirement_date | 0002-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0002-05-16");
    // 11 | type | id=expirement_date | 0020-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0020-05-16");
    // 12 | type | id=expirement_date | 0202-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0202-05-16");
    // 13 | type | id=expirement_date | 2027-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("2027-05-16");
    // 14 | type | id=cvc | 1111
    driver.findElement(By.id("cvc")).sendKeys("1111");
    // 15 | type | id=card_holder | Tommaso Sorrentino
    driver.findElement(By.id("card_holder")).sendKeys("Tommaso Sorrentino");
    // 16 | type | id=street | Via lince 35
    driver.findElement(By.id("street")).sendKeys("Via lince 35");
    // 17 | type | id=country | Italia
    driver.findElement(By.id("country")).sendKeys("Italia");
    // 18 | type | id=region | Campania
    driver.findElement(By.id("region")).sendKeys("Campania");
    // 19 | type | id=city | Napoli
    driver.findElement(By.id("city")).sendKeys("Napoli");
    // 20 | type | id=phone_number_address | 1234567812346
    driver.findElement(By.id("phone_number_address")).sendKeys("1234567812346");
    // 21 | type | id=postal_code | 80040
    driver.findElement(By.id("postal_code")).sendKeys("80040");
    // 22 | type | id=birth_date | 2025-02-16
    driver.findElement(By.id("birth_date")).sendKeys("2025-02-16");
    // 23 | click | css=.fry | 
    driver.findElement(By.cssSelector(".fry")).click();
    // 24 | assertText | id=email_error | Indirizzo email deve rispettare il seguente formato: x@dominio.x
    assertThat(driver.findElement(By.id("email_error")).getText(), is("Indirizzo email deve rispettare il seguente formato: x@dominio.x"));
  }
  @Test
  public void tC3() {
    // Test name: TC_3
    // Step # | name | target | value
    // 1 | open | http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp | 
    driver.get("http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp");
    // 2 | setWindowSize | 1200x1288 | 
    driver.manage().window().setSize(new Dimension(1200, 1288));
    // 3 | type | id=email | tommyrock99@hotmail.t
    driver.findElement(By.id("email")).sendKeys("tommyrock99@hotmail.t");
    // 4 | type | id=password | password1!
    driver.findElement(By.id("password")).sendKeys("password1!");
    // 5 | type | id=psw-repeat | password1!
    driver.findElement(By.id("psw-repeat")).sendKeys("password1!");
    // 6 | type | id=name | Tommaso
    driver.findElement(By.id("name")).sendKeys("Tommaso");
    // 7 | type | id=surname | Sorrentino
    driver.findElement(By.id("surname")).sendKeys("Sorrentino");
    // 8 | type | id=phone_number | 1234567812346
    driver.findElement(By.id("phone_number")).sendKeys("1234567812346");
    // 9 | type | id=card_number | 1234567891234
    driver.findElement(By.id("card_number")).sendKeys("1234567891234");
    // 10 | type | id=expirement_date | 0002-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0002-05-16");
    // 11 | type | id=expirement_date | 0020-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0020-05-16");
    // 12 | type | id=expirement_date | 0202-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0202-05-16");
    // 13 | type | id=expirement_date | 2027-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("2027-05-16");
    // 14 | type | id=cvc | 1111
    driver.findElement(By.id("cvc")).sendKeys("1111");
    // 15 | type | id=card_holder | Tommaso Sorrentino
    driver.findElement(By.id("card_holder")).sendKeys("Tommaso Sorrentino");
    // 16 | type | id=street | Via lince 35
    driver.findElement(By.id("street")).sendKeys("Via lince 35");
    // 17 | type | id=country | Italia
    driver.findElement(By.id("country")).sendKeys("Italia");
    // 18 | type | id=region | Campania
    driver.findElement(By.id("region")).sendKeys("Campania");
    // 19 | type | id=city | Napoli
    driver.findElement(By.id("city")).sendKeys("Napoli");
    // 20 | type | id=phone_number_address | 1234567812346
    driver.findElement(By.id("phone_number_address")).sendKeys("1234567812346");
    // 21 | type | id=postal_code | 80040
    driver.findElement(By.id("postal_code")).sendKeys("80040");
    // 22 | type | id=birth_date | 2025-02-16
    driver.findElement(By.id("birth_date")).sendKeys("2025-02-16");
    // 23 | click | css=.fry | 
    driver.findElement(By.cssSelector(".fry")).click();
    // 24 | assertText | id=error_email_message | Email già in uso
    assertThat(driver.findElement(By.id("error_email_message")).getText(), is("Email già in uso"));
  }
  @Test
  public void tC4() {
    // Test name: TC_4
    // Step # | name | target | value
    // 1 | open | http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp | 
    driver.get("http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp");
    // 2 | setWindowSize | 1200x1288 | 
    driver.manage().window().setSize(new Dimension(1200, 1288));
    // 3 | type | id=email | tommyrock99@hotmail.t
    driver.findElement(By.id("email")).sendKeys("tommyrock99@hotmail.t");
    // 4 | type | id=password | pass1!
    // pass1!
    driver.findElement(By.id("password")).sendKeys("pass1!");
    // 5 | type | id=psw-repeat | password1!
    driver.findElement(By.id("psw-repeat")).sendKeys("password1!");
    // 6 | type | id=name | Tommaso
    driver.findElement(By.id("name")).sendKeys("Tommaso");
    // 7 | type | id=surname | Sorrentino
    driver.findElement(By.id("surname")).sendKeys("Sorrentino");
    // 8 | type | id=phone_number | 1234567812346
    driver.findElement(By.id("phone_number")).sendKeys("1234567812346");
    // 9 | type | id=card_number | 1234567891234
    driver.findElement(By.id("card_number")).sendKeys("1234567891234");
    // 10 | type | id=expirement_date | 0002-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0002-05-16");
    // 11 | type | id=expirement_date | 0020-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0020-05-16");
    // 12 | type | id=expirement_date | 0202-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0202-05-16");
    // 13 | type | id=expirement_date | 2027-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("2027-05-16");
    // 14 | type | id=cvc | 1111
    driver.findElement(By.id("cvc")).sendKeys("1111");
    // 15 | type | id=card_holder | Tommaso Sorrentino
    driver.findElement(By.id("card_holder")).sendKeys("Tommaso Sorrentino");
    // 16 | type | id=street | Via lince 35
    driver.findElement(By.id("street")).sendKeys("Via lince 35");
    // 17 | type | id=country | Italia
    driver.findElement(By.id("country")).sendKeys("Italia");
    // 18 | type | id=region | Campania
    driver.findElement(By.id("region")).sendKeys("Campania");
    // 19 | type | id=city | Napoli
    driver.findElement(By.id("city")).sendKeys("Napoli");
    // 20 | type | id=phone_number_address | 1234567812346
    driver.findElement(By.id("phone_number_address")).sendKeys("1234567812346");
    // 21 | type | id=postal_code | 80040
    driver.findElement(By.id("postal_code")).sendKeys("80040");
    // 22 | type | id=birth_date | 2025-02-16
    driver.findElement(By.id("birth_date")).sendKeys("2025-02-16");
    // 23 | click | css=.fry | 
    driver.findElement(By.cssSelector(".fry")).click();
    // 24 | assertText | id=password_error | Campo non valido: il campo password è obbligatorio e deve contenere minimo 8 caratteri, almeno 1 lettera, 1 numero e un carattere speciale.
    assertThat(driver.findElement(By.id("password_error")).getText(), is("Campo non valido: il campo password è obbligatorio e deve contenere minimo 8 caratteri, almeno 1 lettera, 1 numero e un carattere speciale."));
  }
  @Test
  public void tC5() {
    // Test name: TC_5
    // Step # | name | target | value
    // 1 | open | http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp | 
    driver.get("http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp");
    // 2 | setWindowSize | 1200x1288 | 
    driver.manage().window().setSize(new Dimension(1200, 1288));
    // 3 | type | id=email | tommyrock99@hotmail.t
    driver.findElement(By.id("email")).sendKeys("tommyrock99@hotmail.t");
    // 4 | type | id=password | password1!
    driver.findElement(By.id("password")).sendKeys("password1!");
    // 5 | type | id=psw-repeat | pass3
    driver.findElement(By.id("psw-repeat")).sendKeys("pass3");
    // 6 | type | id=name | Tommaso
    driver.findElement(By.id("name")).sendKeys("Tommaso");
    // 7 | type | id=surname | Sorrentino
    driver.findElement(By.id("surname")).sendKeys("Sorrentino");
    // 8 | type | id=phone_number | 1234567812346
    driver.findElement(By.id("phone_number")).sendKeys("1234567812346");
    // 9 | type | id=card_number | 1234567891234
    driver.findElement(By.id("card_number")).sendKeys("1234567891234");
    // 10 | type | id=expirement_date | 0002-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0002-05-16");
    // 11 | type | id=expirement_date | 0020-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0020-05-16");
    // 12 | type | id=expirement_date | 0202-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0202-05-16");
    // 13 | type | id=expirement_date | 2027-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("2027-05-16");
    // 14 | type | id=cvc | 1111
    driver.findElement(By.id("cvc")).sendKeys("1111");
    // 15 | type | id=card_holder | Tommaso Sorrentino
    driver.findElement(By.id("card_holder")).sendKeys("Tommaso Sorrentino");
    // 16 | type | id=street | Via lince 35
    driver.findElement(By.id("street")).sendKeys("Via lince 35");
    // 17 | type | id=country | Italia
    driver.findElement(By.id("country")).sendKeys("Italia");
    // 18 | type | id=region | Campania
    driver.findElement(By.id("region")).sendKeys("Campania");
    // 19 | type | id=city | Napoli
    driver.findElement(By.id("city")).sendKeys("Napoli");
    // 20 | type | id=phone_number_address | 1234567812346
    driver.findElement(By.id("phone_number_address")).sendKeys("1234567812346");
    // 21 | type | id=postal_code | 80040
    driver.findElement(By.id("postal_code")).sendKeys("80040");
    // 22 | type | id=birth_date | 2025-02-16
    driver.findElement(By.id("birth_date")).sendKeys("2025-02-16");
    // 23 | click | css=.fry | 
    driver.findElement(By.cssSelector(".fry")).click();
    // 24 | assertText | id=password_repeat_error | Le password inserite non sono identiche
    assertThat(driver.findElement(By.id("password_repeat_error")).getText(), is("Le password inserite non sono identiche"));
  }
  @Test
  public void tC6() {
    // Test name: TC_6
    // Step # | name | target | value
    // 1 | open | http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp | 
    driver.get("http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp");
    // 2 | setWindowSize | 1200x1288 | 
    driver.manage().window().setSize(new Dimension(1200, 1288));
    // 3 | type | id=email | tommyrock99@hotmail.t
    driver.findElement(By.id("email")).sendKeys("tommyrock99@hotmail.t");
    // 4 | type | id=password | password1!
    driver.findElement(By.id("password")).sendKeys("password1!");
    // 5 | type | id=psw-repeat | password1!
    driver.findElement(By.id("psw-repeat")).sendKeys("password1!");
    // 6 | type | id=name | Tommaso
    driver.findElement(By.id("name")).sendKeys("Tommaso");
    // 7 | type | id=surname | Sorrentino
    driver.findElement(By.id("surname")).sendKeys("Sorrentino");
    // 8 | type | id=phone_number | 1
    driver.findElement(By.id("phone_number")).sendKeys("1");
    // 9 | type | id=card_number | 1234567891234
    driver.findElement(By.id("card_number")).sendKeys("1234567891234");
    // 10 | type | id=expirement_date | 0002-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0002-05-16");
    // 11 | type | id=expirement_date | 0020-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0020-05-16");
    // 12 | type | id=expirement_date | 0202-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0202-05-16");
    // 13 | type | id=expirement_date | 2027-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("2027-05-16");
    // 14 | type | id=cvc | 1111
    driver.findElement(By.id("cvc")).sendKeys("1111");
    // 15 | type | id=card_holder | Tommaso Sorrentino
    driver.findElement(By.id("card_holder")).sendKeys("Tommaso Sorrentino");
    // 16 | type | id=street | Via lince 35
    driver.findElement(By.id("street")).sendKeys("Via lince 35");
    // 17 | type | id=country | Italia
    driver.findElement(By.id("country")).sendKeys("Italia");
    // 18 | type | id=region | Campania
    driver.findElement(By.id("region")).sendKeys("Campania");
    // 19 | type | id=city | Napoli
    driver.findElement(By.id("city")).sendKeys("Napoli");
    // 20 | type | id=phone_number_address | 1234567812346
    driver.findElement(By.id("phone_number_address")).sendKeys("1234567812346");
    // 21 | type | id=postal_code | 80040
    driver.findElement(By.id("postal_code")).sendKeys("80040");
    // 22 | type | id=birth_date | 2025-02-16
    driver.findElement(By.id("birth_date")).sendKeys("2025-02-16");
    // 23 | click | css=.fry | 
    driver.findElement(By.cssSelector(".fry")).click();
    // 24 | assertText | id=phone_number_error | Campo non valido: il campo numero di cellulare è obbligatorio e la lunghezza del numero cellulare non deve essere compresa tra 13 e 15 e il formato: +39–XXX-XXXXXXX di cui le x sono caratteri numerici
    assertThat(driver.findElement(By.id("phone_number_error")).getText(), is("Campo non valido: il campo numero di cellulare è obbligatorio e la lunghezza del numero cellulare non deve essere compresa tra 13 e 15 e il formato: +39–XXX-XXXXXXX di cui le x sono caratteri numerici"));
  }
  @Test
  public void tC7() {
    // Test name: TC_7
    // Step # | name | target | value
    // 1 | open | http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp | 
    driver.get("http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp");
    // 2 | setWindowSize | 1200x1288 | 
    driver.manage().window().setSize(new Dimension(1200, 1288));
    // 3 | type | id=email | tommyrock99@hotmail.t
    driver.findElement(By.id("email")).sendKeys("tommyrock99@hotmail.t");
    // 4 | type | id=password | password1!
    driver.findElement(By.id("password")).sendKeys("password1!");
    // 5 | type | id=psw-repeat | password1!
    driver.findElement(By.id("psw-repeat")).sendKeys("password1!");
    // 6 | type | id=name | Tommaso
    driver.findElement(By.id("name")).sendKeys("Tommaso");
    // 7 | type | id=surname | Sorrentino
    driver.findElement(By.id("surname")).sendKeys("Sorrentino");
    // 8 | type | id=phone_number | abc
    driver.findElement(By.id("phone_number")).sendKeys("abc");
    // 9 | type | id=card_number | 1234567891234
    driver.findElement(By.id("card_number")).sendKeys("1234567891234");
    // 10 | type | id=expirement_date | 0002-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0002-05-16");
    // 11 | type | id=expirement_date | 0020-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0020-05-16");
    // 12 | type | id=expirement_date | 0202-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0202-05-16");
    // 13 | type | id=expirement_date | 2027-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("2027-05-16");
    // 14 | type | id=cvc | 1111
    driver.findElement(By.id("cvc")).sendKeys("1111");
    // 15 | type | id=card_holder | Tommaso Sorrentino
    driver.findElement(By.id("card_holder")).sendKeys("Tommaso Sorrentino");
    // 16 | type | id=street | Via lince 35
    driver.findElement(By.id("street")).sendKeys("Via lince 35");
    // 17 | type | id=country | Italia
    driver.findElement(By.id("country")).sendKeys("Italia");
    // 18 | type | id=region | Campania
    driver.findElement(By.id("region")).sendKeys("Campania");
    // 19 | type | id=city | Napoli
    driver.findElement(By.id("city")).sendKeys("Napoli");
    // 20 | type | id=phone_number_address | 1234567812346
    driver.findElement(By.id("phone_number_address")).sendKeys("1234567812346");
    // 21 | type | id=postal_code | 80040
    driver.findElement(By.id("postal_code")).sendKeys("80040");
    // 22 | type | id=birth_date | 2025-02-16
    driver.findElement(By.id("birth_date")).sendKeys("2025-02-16");
    // 23 | click | css=.fry | 
    driver.findElement(By.cssSelector(".fry")).click();
    // 24 | assertText | id=phone_number_error | Campo non valido: il campo numero di cellulare è obbligatorio e la lunghezza del numero cellulare non deve essere compresa tra 13 e 15 e il formato: +39–XXX-XXXXXXX di cui le x sono caratteri numerici
    assertThat(driver.findElement(By.id("phone_number_error")).getText(), is("Campo non valido: il campo numero di cellulare è obbligatorio e la lunghezza del numero cellulare non deve essere compresa tra 13 e 15 e il formato: +39–XXX-XXXXXXX di cui le x sono caratteri numerici"));
  }
  @Test
  public void tC8() {
    // Test name: TC_8
    // Step # | name | target | value
    // 1 | open | http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp | 
    driver.get("http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp");
    // 2 | setWindowSize | 1200x1288 | 
    driver.manage().window().setSize(new Dimension(1200, 1288));
    // 3 | type | id=email | tommyrock99@hotmail.t
    driver.findElement(By.id("email")).sendKeys("tommyrock99@hotmail.t");
    // 4 | type | id=password | password1!
    driver.findElement(By.id("password")).sendKeys("password1!");
    // 5 | type | id=psw-repeat | password1!
    driver.findElement(By.id("psw-repeat")).sendKeys("password1!");
    // 6 | type | id=name | Tommaso
    driver.findElement(By.id("name")).sendKeys("Tommaso");
    // 7 | type | id=surname | Sorrentino
    driver.findElement(By.id("surname")).sendKeys("Sorrentino");
    // 8 | type | id=phone_number | 1234567812346
    driver.findElement(By.id("phone_number")).sendKeys("1234567812346");
    // 9 | type | id=card_number | 123456789123432123
    driver.findElement(By.id("card_number")).sendKeys("123456789123432123");
    // 10 | type | id=expirement_date | 0002-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0002-05-16");
    // 11 | type | id=expirement_date | 0020-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0020-05-16");
    // 12 | type | id=expirement_date | 0202-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0202-05-16");
    // 13 | type | id=expirement_date | 2027-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("2027-05-16");
    // 14 | type | id=cvc | 1111
    driver.findElement(By.id("cvc")).sendKeys("1111");
    // 15 | type | id=card_holder | Tommaso Sorrentino
    driver.findElement(By.id("card_holder")).sendKeys("Tommaso Sorrentino");
    // 16 | type | id=street | Via lince 35
    driver.findElement(By.id("street")).sendKeys("Via lince 35");
    // 17 | type | id=country | Italia
    driver.findElement(By.id("country")).sendKeys("Italia");
    // 18 | type | id=region | Campania
    driver.findElement(By.id("region")).sendKeys("Campania");
    // 19 | type | id=city | Napoli
    driver.findElement(By.id("city")).sendKeys("Napoli");
    // 20 | type | id=phone_number_address | 1234567812346
    driver.findElement(By.id("phone_number_address")).sendKeys("1234567812346");
    // 21 | type | id=postal_code | 80040
    driver.findElement(By.id("postal_code")).sendKeys("80040");
    // 22 | type | id=birth_date | 2025-02-16
    driver.findElement(By.id("birth_date")).sendKeys("2025-02-16");
    // 23 | click | css=.fry | 
    driver.findElement(By.cssSelector(".fry")).click();
    // 24 | assertText | id=card_number_error | Campo non valido: Il campo carta di credito è obbligatorio e la lunghezza della carta deve essere compresa tra 13 e 16 e deve contenere esclusivamente caratteri numerici
    assertThat(driver.findElement(By.id("card_number_error")).getText(), is("Campo non valido: Il campo carta di credito è obbligatorio e la lunghezza della carta deve essere compresa tra 13 e 16 e deve contenere esclusivamente caratteri numerici"));
  }
  @Test
  public void tC9() {
    // Test name: TC_9
    // Step # | name | target | value
    // 1 | open | http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp | 
    driver.get("http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp");
    // 2 | setWindowSize | 1200x1288 | 
    driver.manage().window().setSize(new Dimension(1200, 1288));
    // 3 | type | id=email | tommyrock99@hotmail.t
    driver.findElement(By.id("email")).sendKeys("tommyrock99@hotmail.t");
    // 4 | type | id=password | password1!
    driver.findElement(By.id("password")).sendKeys("password1!");
    // 5 | type | id=psw-repeat | password1!
    driver.findElement(By.id("psw-repeat")).sendKeys("password1!");
    // 6 | type | id=name | Tommaso
    driver.findElement(By.id("name")).sendKeys("Tommaso");
    // 7 | type | id=surname | Sorrentino
    driver.findElement(By.id("surname")).sendKeys("Sorrentino");
    // 8 | type | id=phone_number | 1234567812346
    driver.findElement(By.id("phone_number")).sendKeys("1234567812346");
    // 9 | type | id=card_number | abcacccdcccccccc
    driver.findElement(By.id("card_number")).sendKeys("abcacccdcccccccc");
    // 10 | type | id=expirement_date | 0002-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0002-05-16");
    // 11 | type | id=expirement_date | 0020-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0020-05-16");
    // 12 | type | id=expirement_date | 0202-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0202-05-16");
    // 13 | type | id=expirement_date | 2027-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("2027-05-16");
    // 14 | type | id=cvc | 1111
    driver.findElement(By.id("cvc")).sendKeys("1111");
    // 15 | type | id=card_holder | Tommaso Sorrentino
    driver.findElement(By.id("card_holder")).sendKeys("Tommaso Sorrentino");
    // 16 | type | id=street | Via lince 35
    driver.findElement(By.id("street")).sendKeys("Via lince 35");
    // 17 | type | id=country | Italia
    driver.findElement(By.id("country")).sendKeys("Italia");
    // 18 | type | id=region | Campania
    driver.findElement(By.id("region")).sendKeys("Campania");
    // 19 | type | id=city | Napoli
    driver.findElement(By.id("city")).sendKeys("Napoli");
    // 20 | type | id=phone_number_address | 1234567812346
    driver.findElement(By.id("phone_number_address")).sendKeys("1234567812346");
    // 21 | type | id=postal_code | 80040
    driver.findElement(By.id("postal_code")).sendKeys("80040");
    // 22 | type | id=birth_date | 2025-02-16
    driver.findElement(By.id("birth_date")).sendKeys("2025-02-16");
    // 23 | click | css=.fry | 
    driver.findElement(By.cssSelector(".fry")).click();
    // 24 | assertText | id=card_number_error | Campo non valido: Il campo carta di credito è obbligatorio e la lunghezza della carta deve essere compresa tra 13 e 16 e deve contenere esclusivamente caratteri numerici
    assertThat(driver.findElement(By.id("card_number_error")).getText(), is("Campo non valido: Il campo carta di credito è obbligatorio e la lunghezza della carta deve essere compresa tra 13 e 16 e deve contenere esclusivamente caratteri numerici"));
  }
  @Test
  public void tC10() {
    // Test name: TC_10
    // Step # | name | target | value
    // 1 | open | http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp | 
    driver.get("http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp");
    // 2 | setWindowSize | 1200x1288 | 
    driver.manage().window().setSize(new Dimension(1200, 1288));
    // 3 | type | id=email | tommyrock99@hotmail.t
    driver.findElement(By.id("email")).sendKeys("tommyrock99@hotmail.t");
    // 4 | type | id=password | password1!
    driver.findElement(By.id("password")).sendKeys("password1!");
    // 5 | type | id=psw-repeat | password1!
    driver.findElement(By.id("psw-repeat")).sendKeys("password1!");
    // 6 | type | id=name | Tommaso
    driver.findElement(By.id("name")).sendKeys("Tommaso");
    // 7 | type | id=surname | Sorrentino
    driver.findElement(By.id("surname")).sendKeys("Sorrentino");
    // 8 | type | id=phone_number | 1234567812346
    driver.findElement(By.id("phone_number")).sendKeys("1234567812346");
    // 9 | type | id=card_number | 1234567891234
    driver.findElement(By.id("card_number")).sendKeys("1234567891234");
    // 10 | type | id=expirement_date | 0002-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0002-05-16");
    // 11 | type | id=expirement_date | 0020-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0020-05-16");
    // 12 | type | id=expirement_date | 0202-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0202-05-16");
    // 13 | type | id=expirement_date | 2027-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("2027-05-16");
    // 14 | type | id=cvc | 1
    driver.findElement(By.id("cvc")).sendKeys("1");
    // 15 | type | id=card_holder | Tommaso Sorrentino
    driver.findElement(By.id("card_holder")).sendKeys("Tommaso Sorrentino");
    // 16 | type | id=street | Via lince 35
    driver.findElement(By.id("street")).sendKeys("Via lince 35");
    // 17 | type | id=country | Italia
    driver.findElement(By.id("country")).sendKeys("Italia");
    // 18 | type | id=region | Campania
    driver.findElement(By.id("region")).sendKeys("Campania");
    // 19 | type | id=city | Napoli
    driver.findElement(By.id("city")).sendKeys("Napoli");
    // 20 | type | id=phone_number_address | 1234567812346
    driver.findElement(By.id("phone_number_address")).sendKeys("1234567812346");
    // 21 | type | id=postal_code | 80040
    driver.findElement(By.id("postal_code")).sendKeys("80040");
    // 22 | type | id=birth_date | 2025-02-16
    driver.findElement(By.id("birth_date")).sendKeys("2025-02-16");
    // 23 | click | css=.fry | 
    driver.findElement(By.cssSelector(".fry")).click();
    // 24 | assertText | id=cvc_error | Campo non valido: Il campo cvv è obbligatorio e la lunghezza la cui lunghezza deve essere compresa tra 3 e 5 contenente caratteri numeri
    assertThat(driver.findElement(By.id("cvc_error")).getText(), is("Campo non valido: Il campo cvv è obbligatorio e la lunghezza la cui lunghezza deve essere compresa tra 3 e 5 contenente caratteri numeri"));
  }
  @Test
  public void tC11() {
    // Test name: TC_11
    // Step # | name | target | value
    // 1 | open | http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp | 
    driver.get("http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp");
    // 2 | setWindowSize | 1200x1288 | 
    driver.manage().window().setSize(new Dimension(1200, 1288));
    // 3 | type | id=email | tommyrock99@hotmail.t
    driver.findElement(By.id("email")).sendKeys("tommyrock99@hotmail.t");
    // 4 | type | id=password | password1!
    driver.findElement(By.id("password")).sendKeys("password1!");
    // 5 | type | id=psw-repeat | password1!
    driver.findElement(By.id("psw-repeat")).sendKeys("password1!");
    // 6 | type | id=name | Tommaso
    driver.findElement(By.id("name")).sendKeys("Tommaso");
    // 7 | type | id=surname | Sorrentino
    driver.findElement(By.id("surname")).sendKeys("Sorrentino");
    // 8 | type | id=phone_number | 1234567812346
    driver.findElement(By.id("phone_number")).sendKeys("1234567812346");
    // 9 | type | id=card_number | 1234567891234
    driver.findElement(By.id("card_number")).sendKeys("1234567891234");
    // 10 | type | id=expirement_date | 0002-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0002-05-16");
    // 11 | type | id=expirement_date | 0020-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0020-05-16");
    // 12 | type | id=expirement_date | 0202-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0202-05-16");
    // 13 | type | id=expirement_date | 2027-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("2027-05-16");
    // 14 | type | id=cvc | abcd
    driver.findElement(By.id("cvc")).sendKeys("abcd");
    // 15 | type | id=card_holder | Tommaso Sorrentino
    driver.findElement(By.id("card_holder")).sendKeys("Tommaso Sorrentino");
    // 16 | type | id=street | Via lince 35
    driver.findElement(By.id("street")).sendKeys("Via lince 35");
    // 17 | type | id=country | Italia
    driver.findElement(By.id("country")).sendKeys("Italia");
    // 18 | type | id=region | Campania
    driver.findElement(By.id("region")).sendKeys("Campania");
    // 19 | type | id=city | Napoli
    driver.findElement(By.id("city")).sendKeys("Napoli");
    // 20 | type | id=phone_number_address | 1234567812346
    driver.findElement(By.id("phone_number_address")).sendKeys("1234567812346");
    // 21 | type | id=postal_code | 80040
    driver.findElement(By.id("postal_code")).sendKeys("80040");
    // 22 | type | id=birth_date | 2025-02-16
    driver.findElement(By.id("birth_date")).sendKeys("2025-02-16");
    // 23 | click | css=.fry | 
    driver.findElement(By.cssSelector(".fry")).click();
    // 24 | assertText | id=cvc_error | Campo non valido: Il campo cvv è obbligatorio e la lunghezza la cui lunghezza deve essere compresa tra 3 e 5 contenente caratteri numeri
    assertThat(driver.findElement(By.id("cvc_error")).getText(), is("Campo non valido: Il campo cvv è obbligatorio e la lunghezza la cui lunghezza deve essere compresa tra 3 e 5 contenente caratteri numeri"));
  }
  @Test
  public void tC12() {
    // Test name: TC_12
    // Step # | name | target | value
    // 1 | open | http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp | 
    driver.get("http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp");
    // 2 | setWindowSize | 1200x1288 | 
    driver.manage().window().setSize(new Dimension(1200, 1288));
    // 3 | type | id=email | tommyrock99@hotmail.t
    driver.findElement(By.id("email")).sendKeys("tommyrock99@hotmail.t");
    // 4 | type | id=password | password1!
    driver.findElement(By.id("password")).sendKeys("password1!");
    // 5 | type | id=psw-repeat | password1!
    driver.findElement(By.id("psw-repeat")).sendKeys("password1!");
    // 6 | type | id=name | Tommaso
    driver.findElement(By.id("name")).sendKeys("Tommaso");
    // 7 | type | id=surname | Sorrentino
    driver.findElement(By.id("surname")).sendKeys("Sorrentino");
    // 8 | type | id=phone_number | 1234567812346
    driver.findElement(By.id("phone_number")).sendKeys("1234567812346");
    // 9 | type | id=card_number | 1234567891234
    driver.findElement(By.id("card_number")).sendKeys("1234567891234");
    // 10 | type | id=expirement_date | 0002-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0002-05-16");
    // 11 | type | id=expirement_date | 0020-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0020-05-16");
    // 12 | type | id=expirement_date | 0202-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0202-05-16");
    // 13 | type | id=expirement_date | abc
    driver.findElement(By.id("expirement_date")).sendKeys("abc");
    // 14 | type | id=cvc | 1111
    driver.findElement(By.id("cvc")).sendKeys("1111");
    // 15 | type | id=card_holder | Tommaso Sorrentino
    driver.findElement(By.id("card_holder")).sendKeys("Tommaso Sorrentino");
    // 16 | type | id=street | Via lince 35
    driver.findElement(By.id("street")).sendKeys("Via lince 35");
    // 17 | type | id=country | Italia
    driver.findElement(By.id("country")).sendKeys("Italia");
    // 18 | type | id=region | Campania
    driver.findElement(By.id("region")).sendKeys("Campania");
    // 19 | type | id=city | Napoli
    driver.findElement(By.id("city")).sendKeys("Napoli");
    // 20 | type | id=phone_number_address | 1234567812346
    driver.findElement(By.id("phone_number_address")).sendKeys("1234567812346");
    // 21 | type | id=postal_code | 80040
    driver.findElement(By.id("postal_code")).sendKeys("80040");
    // 22 | type | id=birth_date | 2025-02-16
    driver.findElement(By.id("birth_date")).sendKeys("2025-02-16");
    // 23 | click | css=.fry | 
    driver.findElement(By.cssSelector(".fry")).click();
    // 24 | assertText | id=expirement_date_error | Campo non valido: Il campo expiration date è obbligatorio e deve rispettare il seguente formato xx-xx-xxxx
    assertThat(driver.findElement(By.id("expirement_date_error")).getText(), is("Campo non valido: Il campo expiration date è obbligatorio e deve rispettare il seguente formato xx-xx-xxxx"));
  }
  @Test
  public void tC13() {
    // Test name: TC_13
    // Step # | name | target | value
    // 1 | open | http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp | 
    driver.get("http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp");
    // 2 | setWindowSize | 1200x1288 | 
    driver.manage().window().setSize(new Dimension(1200, 1288));
    // 3 | type | id=email | tommyrock99@hotmail.t
    driver.findElement(By.id("email")).sendKeys("tommyrock99@hotmail.t");
    // 4 | type | id=password | password1!
    driver.findElement(By.id("password")).sendKeys("password1!");
    // 5 | type | id=psw-repeat | password1!
    driver.findElement(By.id("psw-repeat")).sendKeys("password1!");
    // 6 | type | id=name | Tommaso
    driver.findElement(By.id("name")).sendKeys("Tommaso");
    // 7 | type | id=surname | Sorrentino
    driver.findElement(By.id("surname")).sendKeys("Sorrentino");
    // 8 | type | id=phone_number | 1234567812346
    driver.findElement(By.id("phone_number")).sendKeys("1234567812346");
    // 9 | type | id=card_number | 1234567891234
    driver.findElement(By.id("card_number")).sendKeys("1234567891234");
    // 10 | type | id=expirement_date | 0002-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0002-05-16");
    // 11 | type | id=expirement_date | 0020-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0020-05-16");
    // 12 | type | id=expirement_date | 0202-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0202-05-16");
    // 13 | type | id=expirement_date | 2027-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("2027-05-16");
    // 14 | type | id=cvc | 1111
    driver.findElement(By.id("cvc")).sendKeys("1111");
    // 15 | type | id=card_holder | Tommaso Sorrentino
    driver.findElement(By.id("card_holder")).sendKeys("Tommaso Sorrentino");
    // 16 | type | id=street | Via lince 35
    driver.findElement(By.id("street")).sendKeys("Via lince 35");
    // 17 | type | id=country | 123
    driver.findElement(By.id("country")).sendKeys("123");
    // 18 | type | id=region | Campania
    driver.findElement(By.id("region")).sendKeys("Campania");
    // 19 | type | id=city | Napoli
    driver.findElement(By.id("city")).sendKeys("Napoli");
    // 20 | type | id=phone_number_address | 1234567812346
    driver.findElement(By.id("phone_number_address")).sendKeys("1234567812346");
    // 21 | type | id=postal_code | 80040
    driver.findElement(By.id("postal_code")).sendKeys("80040");
    // 22 | type | id=birth_date | 2025-02-16
    driver.findElement(By.id("birth_date")).sendKeys("2025-02-16");
    // 23 | click | css=.fry | 
    driver.findElement(By.cssSelector(".fry")).click();
    // 24 | assertText | id=country_error | Campo non valido: Il campo Paese è obbligatorio e la lunghezza del paese deve essere inferiore a 57 i cui caratteri sono esclusivamente alfabetici
    assertThat(driver.findElement(By.id("country_error")).getText(), is("Campo non valido: Il campo Paese è obbligatorio e la lunghezza del paese deve essere inferiore a 57 i cui caratteri sono esclusivamente alfabetici"));
  }
  @Test
  public void tC14() {
    // Test name: TC_14
    // Step # | name | target | value
    // 1 | open | http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp | 
    driver.get("http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp");
    // 2 | setWindowSize | 1200x1288 | 
    driver.manage().window().setSize(new Dimension(1200, 1288));
    // 3 | type | id=email | tommyrock99@hotmail.t
    driver.findElement(By.id("email")).sendKeys("tommyrock99@hotmail.t");
    // 4 | type | id=password | password1!
    driver.findElement(By.id("password")).sendKeys("password1!");
    // 5 | type | id=psw-repeat | password1!
    driver.findElement(By.id("psw-repeat")).sendKeys("password1!");
    // 6 | type | id=name | Tommaso
    driver.findElement(By.id("name")).sendKeys("Tommaso");
    // 7 | type | id=surname | Sorrentino
    driver.findElement(By.id("surname")).sendKeys("Sorrentino");
    // 8 | type | id=phone_number | 1234567812346
    driver.findElement(By.id("phone_number")).sendKeys("1234567812346");
    // 9 | type | id=card_number | 1234567891234
    driver.findElement(By.id("card_number")).sendKeys("1234567891234");
    // 10 | type | id=expirement_date | 0002-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0002-05-16");
    // 11 | type | id=expirement_date | 0020-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0020-05-16");
    // 12 | type | id=expirement_date | 0202-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0202-05-16");
    // 13 | type | id=expirement_date | 2027-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("2027-05-16");
    // 14 | type | id=cvc | 1111
    driver.findElement(By.id("cvc")).sendKeys("1111");
    // 15 | type | id=card_holder | Tommaso Sorrentino
    driver.findElement(By.id("card_holder")).sendKeys("Tommaso Sorrentino");
    // 16 | type | id=street | Via lince 35
    driver.findElement(By.id("street")).sendKeys("Via lince 35");
    // 17 | type | id=country | aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    driver.findElement(By.id("country")).sendKeys("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
    // 18 | type | id=region | Campania
    driver.findElement(By.id("region")).sendKeys("Campania");
    // 19 | type | id=city | Napoli
    driver.findElement(By.id("city")).sendKeys("Napoli");
    // 20 | type | id=phone_number_address | 1234567812346
    driver.findElement(By.id("phone_number_address")).sendKeys("1234567812346");
    // 21 | type | id=postal_code | 80040
    driver.findElement(By.id("postal_code")).sendKeys("80040");
    // 22 | type | id=birth_date | 2025-02-16
    driver.findElement(By.id("birth_date")).sendKeys("2025-02-16");
    // 23 | click | css=.fry | 
    driver.findElement(By.cssSelector(".fry")).click();
    // 24 | assertText | id=country_error | Campo non valido: Il campo Paese è obbligatorio e la lunghezza del paese deve essere inferiore a 57 i cui caratteri sono esclusivamente alfabetici
    assertThat(driver.findElement(By.id("country_error")).getText(), is("Campo non valido: Il campo Paese è obbligatorio e la lunghezza del paese deve essere inferiore a 57 i cui caratteri sono esclusivamente alfabetici"));
  }
  @Test
  public void tC15() {
    // Test name: TC_15
    // Step # | name | target | value
    // 1 | open | http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp | 
    driver.get("http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp");
    // 2 | setWindowSize | 1200x1288 | 
    driver.manage().window().setSize(new Dimension(1200, 1288));
    // 3 | type | id=email | tommyrock99@hotmail.t
    driver.findElement(By.id("email")).sendKeys("tommyrock99@hotmail.t");
    // 4 | type | id=password | password1!
    driver.findElement(By.id("password")).sendKeys("password1!");
    // 5 | type | id=psw-repeat | password1!
    driver.findElement(By.id("psw-repeat")).sendKeys("password1!");
    // 6 | type | id=name | Tommaso
    driver.findElement(By.id("name")).sendKeys("Tommaso");
    // 7 | type | id=surname | Sorrentino
    driver.findElement(By.id("surname")).sendKeys("Sorrentino");
    // 8 | type | id=phone_number | 1234567812346
    driver.findElement(By.id("phone_number")).sendKeys("1234567812346");
    // 9 | type | id=card_number | 1234567891234
    driver.findElement(By.id("card_number")).sendKeys("1234567891234");
    // 10 | type | id=expirement_date | 0002-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0002-05-16");
    // 11 | type | id=expirement_date | 0020-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0020-05-16");
    // 12 | type | id=expirement_date | 0202-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0202-05-16");
    // 13 | type | id=expirement_date | 2027-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("2027-05-16");
    // 14 | type | id=cvc | 1111
    driver.findElement(By.id("cvc")).sendKeys("1111");
    // 15 | type | id=card_holder | Tommaso Sorrentino
    driver.findElement(By.id("card_holder")).sendKeys("Tommaso Sorrentino");
    // 16 | type | id=street | Via lince 35
    driver.findElement(By.id("street")).sendKeys("Via lince 35");
    // 17 | type | id=country | Italia
    driver.findElement(By.id("country")).sendKeys("Italia");
    // 18 | type | id=region | 123
    driver.findElement(By.id("region")).sendKeys("123");
    // 19 | type | id=city | Napoli
    driver.findElement(By.id("city")).sendKeys("Napoli");
    // 20 | type | id=phone_number_address | 1234567812346
    driver.findElement(By.id("phone_number_address")).sendKeys("1234567812346");
    // 21 | type | id=postal_code | 80040
    driver.findElement(By.id("postal_code")).sendKeys("80040");
    // 22 | type | id=birth_date | 2025-02-16
    driver.findElement(By.id("birth_date")).sendKeys("2025-02-16");
    // 23 | click | css=.fry | 
    driver.findElement(By.cssSelector(".fry")).click();
    // 24 | assertText | id=region_error | Campo non valido: il campo regione è obbligatorio e i caratteri alfabetici la cui lunghezza deve essere inferiore a 30
    assertThat(driver.findElement(By.id("region_error")).getText(), is("Campo non valido: il campo regione è obbligatorio e i caratteri alfabetici la cui lunghezza deve essere inferiore a 30"));
  }
  @Test
  public void tC16() {
    // Test name: TC_16
    // Step # | name | target | value
    // 1 | open | http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp | 
    driver.get("http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp");
    // 2 | setWindowSize | 1200x1288 | 
    driver.manage().window().setSize(new Dimension(1200, 1288));
    // 3 | type | id=email | tommyrock99@hotmail.t
    driver.findElement(By.id("email")).sendKeys("tommyrock99@hotmail.t");
    // 4 | type | id=password | password1!
    driver.findElement(By.id("password")).sendKeys("password1!");
    // 5 | type | id=psw-repeat | password1!
    driver.findElement(By.id("psw-repeat")).sendKeys("password1!");
    // 6 | type | id=name | Tommaso
    driver.findElement(By.id("name")).sendKeys("Tommaso");
    // 7 | type | id=surname | Sorrentino
    driver.findElement(By.id("surname")).sendKeys("Sorrentino");
    // 8 | type | id=phone_number | 1234567812346
    driver.findElement(By.id("phone_number")).sendKeys("1234567812346");
    // 9 | type | id=card_number | 1234567891234
    driver.findElement(By.id("card_number")).sendKeys("1234567891234");
    // 10 | type | id=expirement_date | 0002-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0002-05-16");
    // 11 | type | id=expirement_date | 0020-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0020-05-16");
    // 12 | type | id=expirement_date | 0202-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0202-05-16");
    // 13 | type | id=expirement_date | 2027-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("2027-05-16");
    // 14 | type | id=cvc | 1111
    driver.findElement(By.id("cvc")).sendKeys("1111");
    // 15 | type | id=card_holder | Tommaso Sorrentino
    driver.findElement(By.id("card_holder")).sendKeys("Tommaso Sorrentino");
    // 16 | type | id=street | Via lince 35
    driver.findElement(By.id("street")).sendKeys("Via lince 35");
    // 17 | type | id=country | Italia
    driver.findElement(By.id("country")).sendKeys("Italia");
    // 18 | type | id=region | aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    driver.findElement(By.id("region")).sendKeys("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
    // 19 | type | id=city | Napoli
    driver.findElement(By.id("city")).sendKeys("Napoli");
    // 20 | type | id=phone_number_address | 1234567812346
    driver.findElement(By.id("phone_number_address")).sendKeys("1234567812346");
    // 21 | type | id=postal_code | 80040
    driver.findElement(By.id("postal_code")).sendKeys("80040");
    // 22 | type | id=birth_date | 2025-02-16
    driver.findElement(By.id("birth_date")).sendKeys("2025-02-16");
    // 23 | click | css=.fry | 
    driver.findElement(By.cssSelector(".fry")).click();
    // 24 | assertText | id=region_error | Campo non valido: il campo regione è obbligatorio e i caratteri alfabetici la cui lunghezza deve essere inferiore a 30
    assertThat(driver.findElement(By.id("region_error")).getText(), is("Campo non valido: il campo regione è obbligatorio e i caratteri alfabetici la cui lunghezza deve essere inferiore a 30"));
  }
  @Test
  public void tC17() {
    // Test name: TC_17
    // Step # | name | target | value
    // 1 | open | http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp | 
    driver.get("http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp");
    // 2 | setWindowSize | 1200x1288 | 
    driver.manage().window().setSize(new Dimension(1200, 1288));
    // 3 | type | id=email | tommyrock99@hotmail.t
    driver.findElement(By.id("email")).sendKeys("tommyrock99@hotmail.t");
    // 4 | type | id=password | password1!
    driver.findElement(By.id("password")).sendKeys("password1!");
    // 5 | type | id=psw-repeat | password1!
    driver.findElement(By.id("psw-repeat")).sendKeys("password1!");
    // 6 | type | id=name | Tommaso
    driver.findElement(By.id("name")).sendKeys("Tommaso");
    // 7 | type | id=surname | Sorrentino
    driver.findElement(By.id("surname")).sendKeys("Sorrentino");
    // 8 | type | id=phone_number | 1234567812346
    driver.findElement(By.id("phone_number")).sendKeys("1234567812346");
    // 9 | type | id=card_number | 1234567891234
    driver.findElement(By.id("card_number")).sendKeys("1234567891234");
    // 10 | type | id=expirement_date | 2005-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("2005-05-16");
    // 11 | type | id=expirement_date | 2027-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("2027-05-16");
    // 12 | type | id=cvc | 1111
    driver.findElement(By.id("cvc")).sendKeys("1111");
    // 13 | type | id=card_holder | Tommaso Sorrentino
    driver.findElement(By.id("card_holder")).sendKeys("Tommaso Sorrentino");
    // 14 | type | id=street | Via lince 35
    driver.findElement(By.id("street")).sendKeys("Via lince 35");
    // 15 | type | id=country | Italia
    driver.findElement(By.id("country")).sendKeys("Italia");
    // 16 | type | id=region | Campania
    driver.findElement(By.id("region")).sendKeys("Campania");
    // 17 | type | id=city | 21365231
    driver.findElement(By.id("city")).sendKeys("21365231");
    // 18 | type | id=phone_number_address | 1234567812346
    driver.findElement(By.id("phone_number_address")).sendKeys("1234567812346");
    // 19 | type | id=postal_code | 80040
    driver.findElement(By.id("postal_code")).sendKeys("80040");
    // 20 | type | id=birth_date | 2025-02-16
    driver.findElement(By.id("birth_date")).sendKeys("2025-02-16");
    // 21 | click | css=.fry | 
    driver.findElement(By.cssSelector(".fry")).click();
    // 22 | assertText | id=city_error | Campo non valido: Il campo città è obbligatorio i cui caratteri sono esclusivamente alfabetici
    assertThat(driver.findElement(By.id("city_error")).getText(), is("Campo non valido: Il campo città è obbligatorio i cui caratteri sono esclusivamente alfabetici"));
  }
  @Test
  public void tC18() {
    // Test name: TC_18
    // Step # | name | target | value
    // 1 | open | http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp | 
    driver.get("http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp");
    // 2 | setWindowSize | 1200x1288 | 
    driver.manage().window().setSize(new Dimension(1200, 1288));
    // 3 | type | id=email | tommyrock99@hotmail.t
    driver.findElement(By.id("email")).sendKeys("tommyrock99@hotmail.t");
    // 4 | type | id=password | password1!
    driver.findElement(By.id("password")).sendKeys("password1!");
    // 5 | type | id=psw-repeat | password1!
    driver.findElement(By.id("psw-repeat")).sendKeys("password1!");
    // 6 | type | id=name | Tommaso
    driver.findElement(By.id("name")).sendKeys("Tommaso");
    // 7 | type | id=surname | Sorrentino
    driver.findElement(By.id("surname")).sendKeys("Sorrentino");
    // 8 | type | id=phone_number | 1234567812346
    driver.findElement(By.id("phone_number")).sendKeys("1234567812346");
    // 9 | type | id=card_number | 1234567891234
    driver.findElement(By.id("card_number")).sendKeys("1234567891234");
    // 10 | type | id=expirement_date | 2005-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("2005-05-16");
    // 11 | type | id=expirement_date | 2027-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("2027-05-16");
    // 12 | type | id=cvc | 1111
    driver.findElement(By.id("cvc")).sendKeys("1111");
    // 13 | type | id=card_holder | Tommaso Sorrentino
    driver.findElement(By.id("card_holder")).sendKeys("Tommaso Sorrentino");
    // 14 | type | id=street | via !!!@@@
    driver.findElement(By.id("street")).sendKeys("via !!!@@@");
    // 15 | type | id=country | Italia
    driver.findElement(By.id("country")).sendKeys("Italia");
    // 16 | type | id=region | Campania
    driver.findElement(By.id("region")).sendKeys("Campania");
    // 17 | type | id=city | Napoli
    driver.findElement(By.id("city")).sendKeys("Napoli");
    // 18 | type | id=phone_number_address | 1234567812346
    driver.findElement(By.id("phone_number_address")).sendKeys("1234567812346");
    // 19 | type | id=postal_code | 80040
    driver.findElement(By.id("postal_code")).sendKeys("80040");
    // 20 | type | id=birth_date | 2025-02-16
    driver.findElement(By.id("birth_date")).sendKeys("2025-02-16");
    // 21 | click | css=.fry | 
    driver.findElement(By.cssSelector(".fry")).click();
    // 22 | assertText | id=street_error | Campo non valido: il campo via è obbligatorio e La lunghezza deve essere compresa tra 1 e 40 i cui caratteri sono esclusivamente alfanumerici
    assertThat(driver.findElement(By.id("street_error")).getText(), is("Campo non valido: il campo via è obbligatorio e La lunghezza deve essere compresa tra 1 e 40 i cui caratteri sono esclusivamente alfanumerici"));
  }
  @Test
  public void tC19() {
    // Test name: TC_19
    // Step # | name | target | value
    // 1 | open | http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp | 
    driver.get("http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp");
    // 2 | setWindowSize | 1200x1288 | 
    driver.manage().window().setSize(new Dimension(1200, 1288));
    // 3 | type | id=email | tommyrock99@hotmail.t
    driver.findElement(By.id("email")).sendKeys("tommyrock99@hotmail.t");
    // 4 | type | id=password | password1!
    driver.findElement(By.id("password")).sendKeys("password1!");
    // 5 | type | id=psw-repeat | password1!
    driver.findElement(By.id("psw-repeat")).sendKeys("password1!");
    // 6 | type | id=name | Tommaso
    driver.findElement(By.id("name")).sendKeys("Tommaso");
    // 7 | type | id=surname | Sorrentino
    driver.findElement(By.id("surname")).sendKeys("Sorrentino");
    // 8 | type | id=phone_number | 1234567812346
    driver.findElement(By.id("phone_number")).sendKeys("1234567812346");
    // 9 | type | id=card_number | 1234567891234
    driver.findElement(By.id("card_number")).sendKeys("1234567891234");
    // 10 | type | id=expirement_date | 0002-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0002-05-16");
    // 11 | type | id=expirement_date | 0020-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0020-05-16");
    // 12 | type | id=expirement_date | 0202-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("0202-05-16");
    // 13 | type | id=expirement_date | 2027-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("2027-05-16");
    // 14 | type | id=cvc | 1111
    driver.findElement(By.id("cvc")).sendKeys("1111");
    // 15 | type | id=card_holder | Tommaso Sorrentino
    driver.findElement(By.id("card_holder")).sendKeys("Tommaso Sorrentino");
    // 16 | type | id=street | aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    driver.findElement(By.id("street")).sendKeys("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
    // 17 | type | id=country | Italia
    driver.findElement(By.id("country")).sendKeys("Italia");
    // 18 | type | id=region | Campania
    driver.findElement(By.id("region")).sendKeys("Campania");
    // 19 | type | id=city | Napoli
    driver.findElement(By.id("city")).sendKeys("Napoli");
    // 20 | type | id=phone_number_address | 1234567812346
    driver.findElement(By.id("phone_number_address")).sendKeys("1234567812346");
    // 21 | type | id=postal_code | 80040
    driver.findElement(By.id("postal_code")).sendKeys("80040");
    // 22 | type | id=birth_date | 2025-02-16
    driver.findElement(By.id("birth_date")).sendKeys("2025-02-16");
    // 23 | click | css=.fry | 
    driver.findElement(By.cssSelector(".fry")).click();
    // 24 | assertText | id=street_error | Campo non valido: il campo via è obbligatorio e La lunghezza deve essere compresa tra 1 e 40 i cui caratteri sono esclusivamente alfanumerici
    assertThat(driver.findElement(By.id("street_error")).getText(), is("Campo non valido: il campo via è obbligatorio e La lunghezza deve essere compresa tra 1 e 40 i cui caratteri sono esclusivamente alfanumerici"));
  }
  @Test
  public void tC20() {
    // Test name: TC_20
    // Step # | name | target | value
    // 1 | open | http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp | 
    driver.get("http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp");
    // 2 | setWindowSize | 1200x1288 | 
    driver.manage().window().setSize(new Dimension(1200, 1288));
    // 3 | type | id=email | tommyrock99@hotmail.t
    driver.findElement(By.id("email")).sendKeys("tommyrock99@hotmail.t");
    // 4 | type | id=password | password1!
    driver.findElement(By.id("password")).sendKeys("password1!");
    // 5 | type | id=psw-repeat | password1!
    driver.findElement(By.id("psw-repeat")).sendKeys("password1!");
    // 6 | type | id=name | Tommaso
    driver.findElement(By.id("name")).sendKeys("Tommaso");
    // 7 | type | id=surname | Sorrentino
    driver.findElement(By.id("surname")).sendKeys("Sorrentino");
    // 8 | type | id=phone_number | 1234567812346
    driver.findElement(By.id("phone_number")).sendKeys("1234567812346");
    // 9 | type | id=card_number | 1234567891234
    driver.findElement(By.id("card_number")).sendKeys("1234567891234");
    // 10 | type | id=expirement_date | 2005-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("2005-05-16");
    // 11 | type | id=expirement_date | 2027-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("2027-05-16");
    // 12 | type | id=cvc | 1111
    driver.findElement(By.id("cvc")).sendKeys("1111");
    // 13 | type | id=card_holder | Tommaso Sorrentino
    driver.findElement(By.id("card_holder")).sendKeys("Tommaso Sorrentino");
    // 14 | type | id=street | Via lince 35
    driver.findElement(By.id("street")).sendKeys("Via lince 35");
    // 15 | type | id=country | Italia
    driver.findElement(By.id("country")).sendKeys("Italia");
    // 16 | type | id=region | Campania
    driver.findElement(By.id("region")).sendKeys("Campania");
    // 17 | type | id=city | Napoli
    driver.findElement(By.id("city")).sendKeys("Napoli");
    // 18 | type | id=phone_number_address | ascdfhjcmanshe
    driver.findElement(By.id("phone_number_address")).sendKeys("ascdfhjcmanshe");
    // 19 | type | id=postal_code | 80040
    driver.findElement(By.id("postal_code")).sendKeys("80040");
    // 20 | type | id=birth_date | 2025-02-16
    driver.findElement(By.id("birth_date")).sendKeys("2025-02-16");
    // 21 | click | css=.fry | 
    driver.findElement(By.cssSelector(".fry")).click();
    // 22 | assertText | id=phone_number_address_error | Campo non valido: il campo numero di cellulare è obbligatorio e la lunghezza del numero cellulare non deve essere compresa tra 13 e 15 e il formato: +39–XXX-XXXXXXX di cui le x sono caratteri numerici
    assertThat(driver.findElement(By.id("phone_number_address_error")).getText(), is("Campo non valido: il campo numero di cellulare è obbligatorio e la lunghezza del numero cellulare non deve essere compresa tra 13 e 15 e il formato: +39–XXX-XXXXXXX di cui le x sono caratteri numerici"));
  }
  @Test
  public void tC21() {
    // Test name: TC_21
    // Step # | name | target | value
    // 1 | open | http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp | 
    driver.get("http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp");
    // 2 | setWindowSize | 1200x1288 | 
    driver.manage().window().setSize(new Dimension(1200, 1288));
    // 3 | type | id=email | tommyrock99@hotmail.t
    driver.findElement(By.id("email")).sendKeys("tommyrock99@hotmail.t");
    // 4 | type | id=password | password1!
    driver.findElement(By.id("password")).sendKeys("password1!");
    // 5 | type | id=psw-repeat | password1!
    driver.findElement(By.id("psw-repeat")).sendKeys("password1!");
    // 6 | type | id=name | Tommaso
    driver.findElement(By.id("name")).sendKeys("Tommaso");
    // 7 | type | id=surname | Sorrentino
    driver.findElement(By.id("surname")).sendKeys("Sorrentino");
    // 8 | type | id=phone_number | 1234567812346
    driver.findElement(By.id("phone_number")).sendKeys("1234567812346");
    // 9 | type | id=card_number | 1234567891234
    driver.findElement(By.id("card_number")).sendKeys("1234567891234");
    // 10 | type | id=expirement_date | 2005-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("2005-05-16");
    // 11 | type | id=expirement_date | 2027-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("2027-05-16");
    // 12 | type | id=cvc | 1111
    driver.findElement(By.id("cvc")).sendKeys("1111");
    // 13 | type | id=card_holder | Tommaso Sorrentino
    driver.findElement(By.id("card_holder")).sendKeys("Tommaso Sorrentino");
    // 14 | type | id=street | Via lince 35
    driver.findElement(By.id("street")).sendKeys("Via lince 35");
    // 15 | type | id=country | Italia
    driver.findElement(By.id("country")).sendKeys("Italia");
    // 16 | type | id=region | Campania
    driver.findElement(By.id("region")).sendKeys("Campania");
    // 17 | type | id=city | Napoli
    driver.findElement(By.id("city")).sendKeys("Napoli");
    // 18 | type | id=phone_number_address | 39-347
    driver.findElement(By.id("phone_number_address")).sendKeys("39-347");
    // 19 | type | id=postal_code | 80040
    driver.findElement(By.id("postal_code")).sendKeys("80040");
    // 20 | type | id=birth_date | 2025-02-16
    driver.findElement(By.id("birth_date")).sendKeys("2025-02-16");
    // 21 | click | css=.fry | 
    driver.findElement(By.cssSelector(".fry")).click();
    // 22 | assertText | id=phone_number_address_error | Campo non valido: il campo numero di cellulare è obbligatorio e la lunghezza del numero cellulare non deve essere compresa tra 13 e 15 e il formato: +39–XXX-XXXXXXX di cui le x sono caratteri numerici
    assertThat(driver.findElement(By.id("phone_number_address_error")).getText(), is("Campo non valido: il campo numero di cellulare è obbligatorio e la lunghezza del numero cellulare non deve essere compresa tra 13 e 15 e il formato: +39–XXX-XXXXXXX di cui le x sono caratteri numerici"));
  }
  @Test
  public void tC22() {
    // Test name: TC_22
    // Step # | name | target | value
    // 1 | open | http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp | 
    driver.get("http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp");
    // 2 | setWindowSize | 1200x1288 | 
    driver.manage().window().setSize(new Dimension(1200, 1288));
    // 3 | type | id=email | tommyrock99@hotmail.t
    driver.findElement(By.id("email")).sendKeys("tommyrock99@hotmail.t");
    // 4 | type | id=password | password1!
    driver.findElement(By.id("password")).sendKeys("password1!");
    // 5 | type | id=psw-repeat | password1!
    driver.findElement(By.id("psw-repeat")).sendKeys("password1!");
    // 6 | type | id=name | Tommaso
    driver.findElement(By.id("name")).sendKeys("Tommaso");
    // 7 | type | id=surname | Sorrentino
    driver.findElement(By.id("surname")).sendKeys("Sorrentino");
    // 8 | type | id=phone_number | 1234567812346
    driver.findElement(By.id("phone_number")).sendKeys("1234567812346");
    // 9 | type | id=card_number | 1234567891234
    driver.findElement(By.id("card_number")).sendKeys("1234567891234");
    // 10 | type | id=expirement_date | 2005-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("2005-05-16");
    // 11 | type | id=expirement_date | 2027-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("2027-05-16");
    // 12 | type | id=cvc | 1111
    driver.findElement(By.id("cvc")).sendKeys("1111");
    // 13 | type | id=card_holder | Tommaso Sorrentino
    driver.findElement(By.id("card_holder")).sendKeys("Tommaso Sorrentino");
    // 14 | type | id=street | Via lince 35
    driver.findElement(By.id("street")).sendKeys("Via lince 35");
    // 15 | type | id=country | Italia
    driver.findElement(By.id("country")).sendKeys("Italia");
    // 16 | type | id=region | Campania
    driver.findElement(By.id("region")).sendKeys("Campania");
    // 17 | type | id=city | Napoli
    driver.findElement(By.id("city")).sendKeys("Napoli");
    // 18 | type | id=phone_number_address | 1234567812346
    driver.findElement(By.id("phone_number_address")).sendKeys("1234567812346");
    // 19 | type | id=postal_code | abcfgd
    driver.findElement(By.id("postal_code")).sendKeys("abcfgd");
    // 20 | type | id=birth_date | 2025-02-16
    driver.findElement(By.id("birth_date")).sendKeys("2025-02-16");
    // 21 | click | css=.fry | 
    driver.findElement(By.cssSelector(".fry")).click();
    // 22 | assertText | id=postal_code_error | Campo non valido: Il campo CAP è obbligatorio e la lunghezza del CAP deve essere 5, i cui caratteri sono esclusivamente numerici
    assertThat(driver.findElement(By.id("postal_code_error")).getText(), is("Campo non valido: Il campo CAP è obbligatorio e la lunghezza del CAP deve essere 5, i cui caratteri sono esclusivamente numerici"));
  }
  @Test
  public void tC23() {
    // Test name: TC_23
    // Step # | name | target | value
    // 1 | open | http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp | 
    driver.get("http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp");
    // 2 | setWindowSize | 1200x1288 | 
    driver.manage().window().setSize(new Dimension(1200, 1288));
    // 3 | type | id=email | tommyrock99@hotmail.t
    driver.findElement(By.id("email")).sendKeys("tommyrock99@hotmail.t");
    // 4 | type | id=password | password1!
    driver.findElement(By.id("password")).sendKeys("password1!");
    // 5 | type | id=psw-repeat | password1!
    driver.findElement(By.id("psw-repeat")).sendKeys("password1!");
    // 6 | type | id=name | Tommaso
    driver.findElement(By.id("name")).sendKeys("Tommaso");
    // 7 | type | id=surname | Sorrentino
    driver.findElement(By.id("surname")).sendKeys("Sorrentino");
    // 8 | type | id=phone_number | 1234567812346
    driver.findElement(By.id("phone_number")).sendKeys("1234567812346");
    // 9 | type | id=card_number | 1234567891234
    driver.findElement(By.id("card_number")).sendKeys("1234567891234");
    // 10 | type | id=expirement_date | 2005-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("2005-05-16");
    // 11 | type | id=expirement_date | 2027-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("2027-05-16");
    // 12 | type | id=cvc | 1111
    driver.findElement(By.id("cvc")).sendKeys("1111");
    // 13 | type | id=card_holder | Tommaso Sorrentino
    driver.findElement(By.id("card_holder")).sendKeys("Tommaso Sorrentino");
    // 14 | type | id=street | Via lince 35
    driver.findElement(By.id("street")).sendKeys("Via lince 35");
    // 15 | type | id=country | Italia
    driver.findElement(By.id("country")).sendKeys("Italia");
    // 16 | type | id=region | Campania
    driver.findElement(By.id("region")).sendKeys("Campania");
    // 17 | type | id=city | Napoli
    driver.findElement(By.id("city")).sendKeys("Napoli");
    // 18 | type | id=phone_number_address | 1234567812346
    driver.findElement(By.id("phone_number_address")).sendKeys("1234567812346");
    // 19 | type | id=postal_code | 80040123
    driver.findElement(By.id("postal_code")).sendKeys("80040123");
    // 20 | type | id=birth_date | 2025-02-16
    driver.findElement(By.id("birth_date")).sendKeys("2025-02-16");
    // 21 | click | css=.fry | 
    driver.findElement(By.cssSelector(".fry")).click();
    // 22 | assertText | id=postal_code_error | Campo non valido: Il campo CAP è obbligatorio e la lunghezza del CAP deve essere 5, i cui caratteri sono esclusivamente numerici
    assertThat(driver.findElement(By.id("postal_code_error")).getText(), is("Campo non valido: Il campo CAP è obbligatorio e la lunghezza del CAP deve essere 5, i cui caratteri sono esclusivamente numerici"));
  }
  @Test
  public void tC24() {
    // Test name: TC_24
    // Step # | name | target | value
    // 1 | open | http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp | 
    driver.get("http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp");
    // 2 | setWindowSize | 1200x1288 | 
    driver.manage().window().setSize(new Dimension(1200, 1288));
    // 3 | type | id=email | tommyrock99@hotmail.t
    driver.findElement(By.id("email")).sendKeys("tommyrock99@hotmail.t");
    // 4 | type | id=password | password1!
    driver.findElement(By.id("password")).sendKeys("password1!");
    // 5 | type | id=psw-repeat | password1!
    driver.findElement(By.id("psw-repeat")).sendKeys("password1!");
    // 6 | type | id=name | Tommaso
    driver.findElement(By.id("name")).sendKeys("Tommaso");
    // 7 | type | id=surname | Sorrentino
    driver.findElement(By.id("surname")).sendKeys("Sorrentino");
    // 8 | type | id=phone_number | 1234567812346
    driver.findElement(By.id("phone_number")).sendKeys("1234567812346");
    // 9 | type | id=card_number | 1234567891234
    driver.findElement(By.id("card_number")).sendKeys("1234567891234");
    // 10 | type | id=expirement_date | 2000-01-23
    driver.findElement(By.id("expirement_date")).sendKeys("2000-01-23");
    // 11 | type | id=cvc | 1111
    driver.findElement(By.id("cvc")).sendKeys("1111");
    // 12 | type | id=card_holder | Tommaso Sorrentino
    driver.findElement(By.id("card_holder")).sendKeys("Tommaso Sorrentino");
    // 13 | type | id=street | Via lince 35
    driver.findElement(By.id("street")).sendKeys("Via lince 35");
    // 14 | type | id=country | Italia
    driver.findElement(By.id("country")).sendKeys("Italia");
    // 15 | type | id=region | Campania
    driver.findElement(By.id("region")).sendKeys("Campania");
    // 16 | type | id=city | Napoli
    driver.findElement(By.id("city")).sendKeys("Napoli");
    // 17 | type | id=phone_number_address | 1234567812346
    driver.findElement(By.id("phone_number_address")).sendKeys("1234567812346");
    // 18 | type | id=postal_code | 80040
    driver.findElement(By.id("postal_code")).sendKeys("80040");
    // 19 | type | id=birth_date | 2000-01-03
    driver.findElement(By.id("birth_date")).sendKeys("2000-01-03");
    // 20 | click | css=.fry | 
    driver.findElement(By.cssSelector(".fry")).click();
    // 21 | assertText | id=expirement_current_date_error | La data di scadenza della carta non può essere inferiore alla data odierna
    assertThat(driver.findElement(By.id("expirement_current_date_error")).getText(), is("La data di scadenza della carta non può essere inferiore alla data odierna"));
  }
  @Test
  public void tC26() {
    // Test name: TC_26
    // Step # | name | target | value
    // 1 | open | http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp | 
    driver.get("http://localhost:8080/manga_up_war_exploded/ProfileView/registrazione_utente.jsp");
    // 2 | setWindowSize | 1200x1288 | 
    driver.manage().window().setSize(new Dimension(1200, 1288));
    // 3 | type | id=email | tommyrock99@hotmail.t
    driver.findElement(By.id("email")).sendKeys("tommyrock99@hotmail.t");
    // 4 | type | id=password | password1!
    driver.findElement(By.id("password")).sendKeys("password1!");
    // 5 | type | id=psw-repeat | password1!
    driver.findElement(By.id("psw-repeat")).sendKeys("password1!");
    // 6 | type | id=name | Tommaso
    driver.findElement(By.id("name")).sendKeys("Tommaso");
    // 7 | type | id=surname | Sorrentino
    driver.findElement(By.id("surname")).sendKeys("Sorrentino");
    // 8 | type | id=phone_number | 1234567812346
    driver.findElement(By.id("phone_number")).sendKeys("1234567812346");
    // 9 | type | id=card_number | 1234567891234
    driver.findElement(By.id("card_number")).sendKeys("1234567891234");
    // 10 | type | id=expirement_date | 2005-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("2005-05-16");
    // 11 | type | id=expirement_date | 2027-05-16
    driver.findElement(By.id("expirement_date")).sendKeys("2027-05-16");
    // 12 | type | id=cvc | 1111
    driver.findElement(By.id("cvc")).sendKeys("1111");
    // 13 | type | id=card_holder | Tommaso Sorrentino
    driver.findElement(By.id("card_holder")).sendKeys("Tommaso Sorrentino");
    // 14 | type | id=street | Via lince 35
    driver.findElement(By.id("street")).sendKeys("Via lince 35");
    // 15 | type | id=country | Italia
    driver.findElement(By.id("country")).sendKeys("Italia");
    // 16 | type | id=region | Campania
    driver.findElement(By.id("region")).sendKeys("Campania");
    // 17 | type | id=city | Napoli
    driver.findElement(By.id("city")).sendKeys("Napoli");
    // 18 | type | id=phone_number_address | 1234567812346
    driver.findElement(By.id("phone_number_address")).sendKeys("1234567812346");
    // 19 | type | id=postal_code | 80040
    driver.findElement(By.id("postal_code")).sendKeys("80040");
    // 20 | type | id=birth_date | abc
    driver.findElement(By.id("birth_date")).sendKeys("abc");
    // 21 | click | css=.fry | 
    driver.findElement(By.cssSelector(".fry")).click();
    // 22 | assertText | id=birth_date_error | Campo non valido la data di nascita deve rispettare il seguente formato "XX-XX-XXXX" dove X è un carattere numerico.
    assertThat(driver.findElement(By.id("birth_date_error")).getText(), is("Campo non valido la data di nascita deve rispettare il seguente formato \\\"XX-XX-XXXX\\\" dove X è un carattere numerico."));
  }
}
