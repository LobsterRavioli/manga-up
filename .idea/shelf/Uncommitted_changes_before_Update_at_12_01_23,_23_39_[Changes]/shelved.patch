Index: src/main/java/User/AccountService/service_layer/AddressCreateServlet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package User.AccountService.service_layer;\n\nimport User.AccountService.beans.Address;\nimport User.AccountService.beans.AddressBuilder;\nimport User.AccountService.beans.EndUser;\nimport User.AccountService.dao_layer.interfaces.AddressDAO;\nimport utils.AbstractDAOFactory;\n\n\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport javax.servlet.annotation.*;\nimport java.io.IOException;\n\n@WebServlet(name = \"AddressCreateServlet\", value = \"/AddressCreateServlet\")\npublic class AddressCreateServlet extends HttpServlet {\n    private AbstractDAOFactory factory = AbstractDAOFactory.getDAOFactory(AbstractDAOFactory.JDBC);\n    private AddressDAO dao = factory.getAddressDAO();\n\n    @Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        response.setContentType(\"text/html\");\n        EndUser user = (EndUser) request.getSession().getAttribute(\"user\");\n        Address address = new AddressBuilder()\n                .setStreet(request.getParameter(\"street\"))\n                .setCity(request.getParameter(\"city\"))\n                .setCountry(request.getParameter(\"country\"))\n                .setPostalCode(request.getParameter(\"postal_code\"))\n                .setRegion(request.getParameter(\"region\"))\n                .setPhoneNumber(request.getParameter(\"phone_number\"))\n                .setEndUser(user)\n                .createAddress();\n\n        dao.create(address);\n        RequestDispatcher dispatcher = this.getServletContext().getRequestDispatcher(response.encodeURL(\"/AddressDashBoardServlet\"));\n        dispatcher.forward(request, response);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/User/AccountService/service_layer/AddressCreateServlet.java b/src/main/java/User/AccountService/service_layer/AddressCreateServlet.java
--- a/src/main/java/User/AccountService/service_layer/AddressCreateServlet.java	(revision 6674dfa6087447810fbe05a8fc5c8de8e7af41c4)
+++ b/src/main/java/User/AccountService/service_layer/AddressCreateServlet.java	(date 1673558832158)
@@ -24,6 +24,7 @@
 
     @Override
     protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
+
         response.setContentType("text/html");
         EndUser user = (EndUser) request.getSession().getAttribute("user");
         Address address = new AddressBuilder()
Index: src/main/java/User/AccountService/service_layer/RegistrationServlet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package User.AccountService.service_layer;\n\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport javax.servlet.annotation.*;\nimport java.io.IOException;\n\n@WebServlet(name = \"RegistrationServlet\", value = \"/RegistrationServlet\")\npublic class RegistrationServlet extends HttpServlet {\n\n    @Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/User/AccountService/service_layer/RegistrationServlet.java b/src/main/java/User/AccountService/service_layer/RegistrationServlet.java
--- a/src/main/java/User/AccountService/service_layer/RegistrationServlet.java	(revision 6674dfa6087447810fbe05a8fc5c8de8e7af41c4)
+++ b/src/main/java/User/AccountService/service_layer/RegistrationServlet.java	(date 1673562698101)
@@ -1,13 +1,25 @@
 package User.AccountService.service_layer;
 
+import User.AccountService.beans.*;
+import User.AccountService.dao_layer.interfaces.AddressDAO;
+import User.AccountService.dao_layer.interfaces.CreditCardDAO;
+import User.AccountService.dao_layer.interfaces.EndUserDAO;
+import utils.AbstractDAOFactory;
+
 import javax.servlet.*;
 import javax.servlet.http.*;
 import javax.servlet.annotation.*;
 import java.io.IOException;
+import java.util.Date;
 
 @WebServlet(name = "RegistrationServlet", value = "/RegistrationServlet")
 public class RegistrationServlet extends HttpServlet {
 
+    private static final String EMAIL_ERROR = "Email gi√† in uso";
+    private AbstractDAOFactory factory = AbstractDAOFactory.getDAOFactory(AbstractDAOFactory.JDBC);
+    private EndUserDAO daoEndUser = factory.getEndUserDAO();
+    private AddressDAO daoAddress = factory.getAddressDAO();
+    private CreditCardDAO daoCreditCard = factory.getCreditCardDAO();
     @Override
     protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
         doPost(request, response);
@@ -16,5 +28,49 @@
     @Override
     protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
 
+        response.setContentType("text/html");
+
+        EndUser user = new EndUserBuilder()
+                .setName(request.getParameter("name"))
+                .setSurname(request.getParameter("surname"))
+                .setEmail(request.getParameter("email"))
+                .setPhoneNumber(request.getParameter("phone_number"))
+                .setPassword(request.getParameter("password"))
+                .setBirthdate(new Date(request.getParameter("password")))
+                .createEndUser();
+
+        if(!daoEndUser.existEmail(user.getEmail())){
+            RequestDispatcher dispatcher = this.getServletContext().getRequestDispatcher(response.encodeURL("/profile_view/registration_end_user.jsp"));
+            request.setAttribute("message", EMAIL_ERROR);
+            dispatcher.forward(request, response);
+            return;
+        }
+
+        Address address = new AddressBuilder()
+                .setStreet(request.getParameter("street"))
+                .setCity(request.getParameter("city"))
+                .setCountry(request.getParameter("country"))
+                .setPostalCode(request.getParameter("postal_code"))
+                .setRegion(request.getParameter("region"))
+                .createAddress();
+
+
+        CreditCard card = new CreditCardBuilder()
+                .setCardNumber(request.getParameter("card_number"))
+                .setCardHolder(request.getParameter("card_holder"))
+                .setExpirationDate(new Date(request.getParameter("expiration_date")))
+                .setCvv(request.getParameter("cvv"))
+                .createCreditCard();
+
+        address.setEndUser(user);
+        card.setEndUser(user);
+        daoEndUser.create(user);
+        daoAddress.create(address);
+        daoCreditCard.create(card);
+
+        request.getSession().setAttribute("user", user);
+        RequestDispatcher dispatcher = this.getServletContext().getRequestDispatcher(response.encodeURL("/MerchandisingView/homepage.jsp"));
+        dispatcher.forward(request, response);
+
     }
 }
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Default ignored files\n/shelf/\n/workspace.xml\n# Datasource local storage ignored files\n/dataSources/\n/dataSources.local.xml\n# Editor-based HTTP Client requests\n/httpRequests/\n/artifacts/\n/libraries/\n../src/main/webapp/META-INF/context.xml\n../src/main/java/context/MainContext.java\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
--- a/.idea/.gitignore	(revision 6674dfa6087447810fbe05a8fc5c8de8e7af41c4)
+++ b/.idea/.gitignore	(date 1673563114722)
@@ -10,3 +10,23 @@
 /libraries/
 ../src/main/webapp/META-INF/context.xml
 ../src/main/java/context/MainContext.java
+
+#### ignore all .idea files ...
+*
+
+#### except
+
+# Version Control configuration for your project
+!vcs.xml
+
+# how IDEA should treat the text files in your project
+!encodings.xml
+
+# automatic code formatting
+!codeStyleSettings.xml
+
+# project specific words
+!dictionaries
+!copyrights
+!misc.xml
+!sqldialects.xml
\ No newline at end of file
Index: src/main/java/User/AccountService/service_layer/LoginEndUserServlet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package User.AccountService.service_layer;\n\nimport User.AccountService.beans.EndUser;\nimport User.AccountService.dao_layer.interfaces.EndUserDAO;\nimport utils.AbstractDAOFactory;\n\n\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport javax.servlet.annotation.*;\nimport java.io.IOException;\n\n@WebServlet(\"/LoginEndUserServlet\")\npublic class LoginEndUserServlet extends HttpServlet {\n    private AbstractDAOFactory factory = AbstractDAOFactory.getDAOFactory(AbstractDAOFactory.JDBC);\n    private EndUserDAO dao = factory.getEndUserDAO();\n\n\n    @Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        doPost(request, response);\n\n    }\n\n    @Override\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        response.setContentType(\"text/html\");\n        String email = request.getParameter(\"username\");\n        String password = request.getParameter(\"password\");\n        System.out.println(email);\n        System.out.println(password);\n        EndUser user = dao.find(email,password);\n\n        if(user != null){\n            HttpSession session = request.getSession();\n            session.setAttribute(\"user\", user);\n            RequestDispatcher dispatcher = this.getServletContext().getRequestDispatcher(response.encodeURL(\"/MerchandisingView/homepage.jsp\"));\n            dispatcher.forward(request, response);\n        }\n        else{\n            RequestDispatcher dispatcher = this.getServletContext().getRequestDispatcher(response.encodeURL(\"/profile_view/login_end_user.jsp\"));\n            dispatcher.forward(request, response);\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/User/AccountService/service_layer/LoginEndUserServlet.java b/src/main/java/User/AccountService/service_layer/LoginEndUserServlet.java
--- a/src/main/java/User/AccountService/service_layer/LoginEndUserServlet.java	(revision 6674dfa6087447810fbe05a8fc5c8de8e7af41c4)
+++ b/src/main/java/User/AccountService/service_layer/LoginEndUserServlet.java	(date 1673562450762)
@@ -24,22 +24,20 @@
 
     @Override
     protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
+
         response.setContentType("text/html");
         String email = request.getParameter("username");
         String password = request.getParameter("password");
-        System.out.println(email);
-        System.out.println(password);
         EndUser user = dao.find(email,password);
 
         if(user != null){
-            HttpSession session = request.getSession();
-            session.setAttribute("user", user);
-            RequestDispatcher dispatcher = this.getServletContext().getRequestDispatcher(response.encodeURL("/MerchandisingView/homepage.jsp"));
+            RequestDispatcher dispatcher = this.getServletContext().getRequestDispatcher(response.encodeURL("/RegistrationServlet"));
             dispatcher.forward(request, response);
+            return;
         }
-        else{
-            RequestDispatcher dispatcher = this.getServletContext().getRequestDispatcher(response.encodeURL("/profile_view/login_end_user.jsp"));
-            dispatcher.forward(request, response);
-        }
+
+        RequestDispatcher dispatcher = this.getServletContext().getRequestDispatcher(response.encodeURL("/profile_view/login_end_user.jsp"));
+        dispatcher.forward(request, response);
+
     }
 }
Index: src/main/java/User/AccountService/service_layer/AddressDeleteServlet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package User.AccountService.service_layer;\n\nimport User.AccountService.beans.Address;\nimport User.AccountService.beans.AddressBuilder;\nimport User.AccountService.beans.EndUser;\nimport User.AccountService.dao_layer.interfaces.AddressDAO;\nimport utils.AbstractDAOFactory;\n\n\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport javax.servlet.annotation.*;\nimport java.io.IOException;\n\n@WebServlet(name = \"AddressDeleteServlet\", value = \"/AddressDeleteServlet\")\npublic class AddressDeleteServlet extends HttpServlet {\n\n    private AbstractDAOFactory factory = AbstractDAOFactory.getDAOFactory(AbstractDAOFactory.JDBC);\n    private AddressDAO dao = factory.getAddressDAO();\n    @Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        response.setContentType(\"text/html\");\n        EndUser user = (EndUser) request.getSession().getAttribute(\"user\");\n        Address address = new AddressBuilder()\n                .setStreet(request.getParameter(\"street\"))\n                .setCity(request.getParameter(\"city\"))\n                .setCountry(request.getParameter(\"country\"))\n                .setPostalCode(request.getParameter(\"postal_code\"))\n                .setRegion(request.getParameter(\"region\"))\n                .setPhoneNumber(request.getParameter(\"phone_number\"))\n                .setEndUser(user)\n                .createAddress();\n\n        dao.findSingleByEnduser(address);\n        dao.delete(address);\n        RequestDispatcher dispatcher = this.getServletContext().getRequestDispatcher(response.encodeURL(\"/AddressDashboardServlet\"));\n        dispatcher.forward(request, response);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/User/AccountService/service_layer/AddressDeleteServlet.java b/src/main/java/User/AccountService/service_layer/AddressDeleteServlet.java
--- a/src/main/java/User/AccountService/service_layer/AddressDeleteServlet.java	(revision 6674dfa6087447810fbe05a8fc5c8de8e7af41c4)
+++ b/src/main/java/User/AccountService/service_layer/AddressDeleteServlet.java	(date 1673558924442)
@@ -26,17 +26,7 @@
     protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
         response.setContentType("text/html");
         EndUser user = (EndUser) request.getSession().getAttribute("user");
-        Address address = new AddressBuilder()
-                .setStreet(request.getParameter("street"))
-                .setCity(request.getParameter("city"))
-                .setCountry(request.getParameter("country"))
-                .setPostalCode(request.getParameter("postal_code"))
-                .setRegion(request.getParameter("region"))
-                .setPhoneNumber(request.getParameter("phone_number"))
-                .setEndUser(user)
-                .createAddress();
-
-        dao.findSingleByEnduser(address);
+        Address address = new AddressBuilder().setId(Integer.valueOf(request.getParameter("id"))).setEndUser(user).createAddress();
         dao.delete(address);
         RequestDispatcher dispatcher = this.getServletContext().getRequestDispatcher(response.encodeURL("/AddressDashboardServlet"));
         dispatcher.forward(request, response);
Index: src/main/java/User/AccountService/dao_layer/implementations/EndUserDAOImp.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package User.AccountService.dao_layer.implementations;\n\nimport User.AccountService.beans.EndUser;\nimport User.AccountService.dao_layer.interfaces.EndUserDAO;\nimport utils.DAOException;\nimport utils.Utils;\n\nimport javax.sql.DataSource;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\nimport static utils.DAOUtil.prepareStatement;\nimport static utils.DAOUtil.toSqlDate;\n\n\npublic class EndUserDAOImp implements EndUserDAO {\n    public static final String TABLE = \"END_USER\";\n    private DataSource ds;\n\n    public EndUserDAOImp(DataSource ds){\n        this.ds = ds;\n    }\n\n    private static final String SQL_INSERT =\n            \"INSERT INTO end_user (usr_email, usr_name, usr_surname, usr_password, usr_phone_number, usr_birth_date)\\n\" +\n            \"VALUES (?, ?, ?, ?, ?, ?);\";\n\n    private static final String SQL_DELETE =\n            \"DELETE FROM end_user WHERE usr_id = ? ;\";\n\n    private static final String SQL_UPDATE =\n            \"UPDATE end_user SET usr_name = ? , usr_surname = ? , usr_email = ? , usr_password = ? , usr_phone_number = ? WHERE usr_id = ? ;\";\n\n    private static final String SQL_FIND_BY_ID =\n            \"SELECT * FROM end_user WHERE usr_id = ? ;\";\n\n\n    private static final String SQL_FIND_BY_EMAIL_AND_PASSWORD =\n            \"SELECT * FROM end_user WHERE usr_email = ? AND usr_password = ? ;\";\n\n    private static final String SQL_EXIST_EMAIL =\n            \"SELECT usr_email FROM end_user WHERE usr_email = ?\";\n\n    private static final String SQL_LIST_ORDER_BY_ID = \"SELECT * FROM end_user ORDER BY usr_id;\";\n    @Override\n    public void create(EndUser user) throws IllegalArgumentException, DAOException {\n        if (user.getId() != 0) {\n            throw new IllegalArgumentException(\"User is already created, the user ID is not null.\");\n        }\n\n        Object[] values = {\n                user.getEmail(),\n                user.getName(),\n                user.getSurname(),\n                Utils.hash(user.getPassword()),\n                user.getPhoneNumber(),\n                toSqlDate(user.getBirthdate())\n        };\n\n        try (\n                Connection connection = ds.getConnection();\n                PreparedStatement statement = prepareStatement(connection, SQL_INSERT, true, values)\n        ) {\n            int affectedRows = statement.executeUpdate();\n            if (affectedRows == 0) {\n                throw new DAOException(\"Creating user failed, no rows affected.\");\n            }\n\n            try (ResultSet generatedKeys = statement.getGeneratedKeys()) {\n                if (generatedKeys.next()) {\n                    user.setId(generatedKeys.getInt(1));\n                } else {\n                    throw new DAOException(\"Creating user failed, no generated key obtained.\");\n                }\n            }\n        } catch (SQLException  e) {\n            throw new DAOException(e);\n        }\n    }\n\n    @Override\n    public void delete(EndUser user) {\n        Object[] values = {\n                user.getId()\n        };\n\n        try (\n                Connection connection = ds.getConnection();\n                PreparedStatement statement = prepareStatement(connection, SQL_DELETE, false, values)\n        ) {\n            int affectedRows = statement.executeUpdate();\n            if (affectedRows == 0) {\n                throw new DAOException(\"Deleting user failed, no rows affected.\");\n            } else {\n                user.setId(0);\n            }\n        } catch (SQLException e) {\n            throw new DAOException(e);\n        }\n    }\n\n    @Override\n    public void update(EndUser user) {\n        if (user.getId() != 0) {\n            throw new IllegalArgumentException(\"User is already created, the user ID is not null.\");\n        }\n        Object[] values = {\n                user.getName(),\n                user.getSurname(),\n                user.getEmail(),\n                user.getPassword(),\n                toSqlDate(user.getBirthdate())\n        };\n\n        try (\n                Connection connection = ds.getConnection();\n                PreparedStatement statement = prepareStatement(connection, SQL_UPDATE, false, values)\n        ) {\n            int affectedRows = statement.executeUpdate();\n            if (affectedRows == 0) {\n                throw new DAOException(\"Updating user failed, no rows affected.\");\n            }\n        } catch (SQLException e) {\n            throw new DAOException(e);\n        }\n    }\n\n    @Override\n    public boolean existEmail(String email) throws DAOException {\n        Object[] values = {\n                email\n        };\n        boolean exist;\n\n        try (\n                Connection connection = ds.getConnection();\n                PreparedStatement statement = prepareStatement(connection, SQL_EXIST_EMAIL, false, values);\n                ResultSet resultSet = statement.executeQuery()\n        ) {\n            exist = resultSet.next();\n        } catch (SQLException e) {\n            throw new DAOException(e);\n        }\n\n        return exist;\n    }\n\n    @Override\n    public EndUser find(int id) { return find(SQL_FIND_BY_ID, id); }\n\n    @Override\n    public EndUser find(String email, String password) {\n        return find(SQL_FIND_BY_EMAIL_AND_PASSWORD,email, Utils.hash(password));\n    }\n\n\n    private EndUser find(String sql, Object... values) throws DAOException {\n        EndUser user = null;\n\n        try (\n                Connection connection = ds.getConnection();\n                PreparedStatement statement = prepareStatement(connection, sql, false, values);\n                ResultSet resultSet = statement.executeQuery()\n        ) {\n            if (resultSet.next()) {\n                user = map(resultSet);\n            }\n        } catch (SQLException e) {\n            throw new DAOException(e);\n        }\n\n        return user;\n    }\n\n    @Override\n    public Collection list() throws DAOException {\n        List<EndUser> users = new ArrayList<>();\n\n        try (\n                Connection connection = ds.getConnection();\n                PreparedStatement statement = connection.prepareStatement(SQL_LIST_ORDER_BY_ID);\n                ResultSet resultSet = statement.executeQuery();\n        ) {\n            while (resultSet.next()) {\n                users.add(map(resultSet));\n            }\n        } catch (SQLException e) {\n            throw new DAOException(e);\n        }\n\n        return users;\n    }\n\n    /**\n     * Map the current row of the given ResultSet to an User.\n     * @param resultSet The ResultSet of which the current row is to be mapped to an User.\n     * @return The mapped User from the current row of the given ResultSet.\n     * @throws SQLException If something fails at database level.\n     */\n\n    private static EndUser map(ResultSet resultSet) throws SQLException {\n        EndUser user = new EndUser();\n        user.setId(resultSet.getInt(\"usr_id\"));\n        user.setEmail(resultSet.getString(\"usr_email\"));\n        user.setPassword(resultSet.getString(\"usr_password\"));\n        user.setPhoneNumber(resultSet.getString(\"usr_phone_number\"));\n        user.setName(resultSet.getString(\"usr_name\"));\n        user.setSurname(resultSet.getString(\"usr_surname\"));\n        user.setBirthdate(resultSet.getDate(\"usr_birth_date\"));\n        return user;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/User/AccountService/dao_layer/implementations/EndUserDAOImp.java b/src/main/java/User/AccountService/dao_layer/implementations/EndUserDAOImp.java
--- a/src/main/java/User/AccountService/dao_layer/implementations/EndUserDAOImp.java	(revision 6674dfa6087447810fbe05a8fc5c8de8e7af41c4)
+++ b/src/main/java/User/AccountService/dao_layer/implementations/EndUserDAOImp.java	(date 1673559223655)
@@ -1,6 +1,7 @@
 package User.AccountService.dao_layer.implementations;
 
 import User.AccountService.beans.EndUser;
+import User.AccountService.beans.EndUserBuilder;
 import User.AccountService.dao_layer.interfaces.EndUserDAO;
 import utils.DAOException;
 import utils.Utils;
@@ -204,7 +205,7 @@
      */
 
     private static EndUser map(ResultSet resultSet) throws SQLException {
-        EndUser user = new EndUser();
+        EndUser user = new EndUserBuilder().createEndUser();
         user.setId(resultSet.getInt("usr_id"));
         user.setEmail(resultSet.getString("usr_email"));
         user.setPassword(resultSet.getString("usr_password"));
Index: src/main/java/User/AccountService/beans/EndUser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package User.AccountService.beans;\n\nimport java.util.*;\n\npublic class EndUser{\n    private String name;\n    private String surname;\n    private String email;\n    private String phoneNumber;\n    private String password;\n    private Set addresses;\n    private Set cards;\n    private Date birthdate;\n    private int id;\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    public EndUser(){\n        cards = new HashSet();\n        addresses = new HashSet();\n    }\n\n    public EndUser(int id){\n        this.id = id;\n        cards = new HashSet();\n        addresses = new HashSet();\n    }\n\n    public EndUser(int id, String name, String password){\n        this.id = id;\n        this.name = name;\n        this.password = password;\n        cards = new HashSet();\n        addresses = new HashSet();\n    }\n\n    public EndUser(String name, String surname, String email, String phoneNumber, String password, Date birthdate, Set addresses, Set cards) {\n        this.name = name;\n        this.surname = surname;\n        this.email = email;\n        this.phoneNumber = phoneNumber;\n        this.password = password;\n        this.birthdate = birthdate;\n        this.addresses = new HashSet();\n        this.cards = new HashSet();\n    }\n\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getSurname() {\n        return surname;\n    }\n\n    public void setSurname(String surname) {\n        this.surname = surname;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getPhoneNumber() {\n        return phoneNumber;\n    }\n\n    public void setPhoneNumber(String phoneNumber) {\n        this.phoneNumber = phoneNumber;\n    }\n\n    public Set getAddresses() {\n        return addresses;\n    }\n\n    public void setAddresses(Set addresses) {\n        this.addresses = addresses;\n    }\n\n    public Set getCards() {\n        return cards;\n    }\n\n    public void setCards(Set cards) {\n        this.cards = cards;\n    }\n\n    public Date getBirthdate() {\n        return birthdate;\n    }\n\n    public void setBirthdate(Date birthdate) {\n        this.birthdate = birthdate;\n    }\n\n    public void addAddress(Address address){\n        addresses.add(address);\n        address.setEndUser(this);\n    }\n\n    public void removeAddress(Address address){\n        addresses.remove(address);\n        address.setEndUser(null);\n    }\n\n    @Override\n    public String toString() {\n        return \"EndUser{\" +\n                \"name='\" + name + '\\'' +\n                \", surname='\" + surname + '\\'' +\n                \", email='\" + email + '\\'' +\n                \", phoneNumber='\" + phoneNumber + '\\'' +\n                \", password='\" + password + '\\'' +\n                \", addresses=\" + addresses +\n                \", cards=\" + cards +\n                \", birthdate=\" + birthdate +\n                \", id=\" + id +\n                '}';\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/User/AccountService/beans/EndUser.java b/src/main/java/User/AccountService/beans/EndUser.java
--- a/src/main/java/User/AccountService/beans/EndUser.java	(revision 6674dfa6087447810fbe05a8fc5c8de8e7af41c4)
+++ b/src/main/java/User/AccountService/beans/EndUser.java	(date 1673559150865)
@@ -30,33 +30,33 @@
     }
 
     public EndUser(){
-        cards = new HashSet();
-        addresses = new HashSet();
+        setCards(new HashSet());
+        setAddresses(new HashSet());
     }
 
     public EndUser(int id){
-        this.id = id;
-        cards = new HashSet();
-        addresses = new HashSet();
+        this.setId(id);
+        setCards(new HashSet());
+        setAddresses(new HashSet());
     }
 
     public EndUser(int id, String name, String password){
-        this.id = id;
-        this.name = name;
-        this.password = password;
-        cards = new HashSet();
-        addresses = new HashSet();
+        this.setId(id);
+        this.setName(name);
+        this.setPassword(password);
+        setCards(new HashSet());
+        setAddresses(new HashSet());
     }
 
     public EndUser(String name, String surname, String email, String phoneNumber, String password, Date birthdate, Set addresses, Set cards) {
-        this.name = name;
-        this.surname = surname;
-        this.email = email;
-        this.phoneNumber = phoneNumber;
-        this.password = password;
-        this.birthdate = birthdate;
-        this.addresses = new HashSet();
-        this.cards = new HashSet();
+        this.setName(name);
+        this.setSurname(surname);
+        this.setEmail(email);
+        this.setPhoneNumber(phoneNumber);
+        this.setPassword(password);
+        this.setBirthdate(birthdate);
+        this.setAddresses(new HashSet());
+        this.setCards(new HashSet());
     }
 
 
@@ -117,27 +117,27 @@
     }
 
     public void addAddress(Address address){
-        addresses.add(address);
+        getAddresses().add(address);
         address.setEndUser(this);
     }
 
     public void removeAddress(Address address){
-        addresses.remove(address);
+        getAddresses().remove(address);
         address.setEndUser(null);
     }
 
     @Override
     public String toString() {
         return "EndUser{" +
-                "name='" + name + '\'' +
-                ", surname='" + surname + '\'' +
-                ", email='" + email + '\'' +
-                ", phoneNumber='" + phoneNumber + '\'' +
-                ", password='" + password + '\'' +
-                ", addresses=" + addresses +
-                ", cards=" + cards +
-                ", birthdate=" + birthdate +
-                ", id=" + id +
+                "name='" + getName() + '\'' +
+                ", surname='" + getSurname() + '\'' +
+                ", email='" + getEmail() + '\'' +
+                ", phoneNumber='" + getPhoneNumber() + '\'' +
+                ", password='" + getPassword() + '\'' +
+                ", addresses=" + getAddresses() +
+                ", cards=" + getCards() +
+                ", birthdate=" + getBirthdate() +
+                ", id=" + getId() +
                 '}';
     }
 }
Index: src/main/java/User/AccountService/dao_layer/implementations/AddressDAOImp.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package User.AccountService.dao_layer.implementations;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\nimport javax.sql.DataSource;\n\nimport User.AccountService.beans.Address;\nimport User.AccountService.beans.AddressBuilder;\nimport User.AccountService.beans.EndUser;\nimport User.AccountService.dao_layer.interfaces.AddressDAO;\nimport utils.DAOException;\n\nimport static utils.DAOUtil.prepareStatement;\n\n\npublic class AddressDAOImp implements AddressDAO {\n\n    private DataSource ds;\n\n    public AddressDAOImp(DataSource ds){\n        this.ds = ds;\n    }\n    private static final String CREATE_QUERY = \"INSERT INTO address (street, addr_country, addr_city, addr_street, addr_postal_code, addr_phone_number,addr_region,usr_id) VALUES (?, ?, ?, ?, ?, ?, ?);\";\n    private static final String DELETE_QUERY = \"DELETE FROM ADDRESS WHERE addr_id = ?;\";\n\n    private static final String SQL_LIST_ORDER_BY_ORDER_ID =\n            \"SELECT * FROM address ORDER BY addr_id\";\n    private static final String SQL_FIND_BY_ADDRESS_ID = \"SELECT * FROM address WHERE usr_id = ?;\";\n    private static final String SQL_FIND_ALL_BY_ENDUSER = \"SELECT * FROM ADDRESS WHERE usr_id = ?;\";\n    private static final String SQL_FIND_SINGLE_BY_ENDUSER = \"SELECT *  FROM MANGA_UP.address WHERE addr_id = ?1\\n\" +\n            \"    AND addr_city = ?1\\n\" +\n            \"    AND addr_country = ?2\\n\" +\n            \"    AND addr_postal_code = ?3\\n\" +\n            \"    AND addr_street_number = ?4\\n\" +\n            \"    AND usr_id = ?5;\";\n\n    @Override\n    public void create(Address address) {\n        Object[] values = {\n            address.getStreet(),\n            address.getCountry(),\n            address.getCity(),\n            address.getStreet(),\n            address.getPostalCode(),\n            address.getPhoneNumber(),\n                address.getRegion(),\n            address.getEndUser().getId()\n    };\n\n    try (\n            Connection connection = ds.getConnection();\n            PreparedStatement statement = prepareStatement(connection, CREATE_QUERY, true, values)\n    ) {\n        int affectedRows = statement.executeUpdate();\n        if (affectedRows == 0) {\n            throw new DAOException(\"Creating user failed, no rows affected.\");\n        }\n\n        try (ResultSet generatedKeys = statement.getGeneratedKeys()) {\n            if (generatedKeys.next()) {\n                address.setId(generatedKeys.getInt(1));\n            } else {\n                throw new DAOException(\"Creating user failed, no generated key obtained.\");\n            }\n        }\n        } catch (SQLException e) {\n            throw new DAOException(e);\n        }\n    }\n\n    @Override\n    public void delete(Address address) {\n        Object[] values = {\n            address.getId()\n        };\n\n        try (\n                Connection connection = ds.getConnection();\n                PreparedStatement statement = prepareStatement(connection, DELETE_QUERY, false, values)\n        ) {\n            int affectedRows = statement.executeUpdate();\n            if (affectedRows == 0) {\n                throw new DAOException(\"Deleting user failed, no rows affected.\");\n            } else {\n                address.setId(0);\n            }\n        } catch (SQLException e) {\n            throw new DAOException(e);\n        }\n    }\n\n    @Override\n    public Collection list() {\n        List<Address> addresses = new ArrayList<>();\n\n        try (\n                Connection connection = ds.getConnection();\n                PreparedStatement statement = connection.prepareStatement(SQL_LIST_ORDER_BY_ORDER_ID);\n                ResultSet resultSet = statement.executeQuery();\n        ) {\n            while (resultSet.next()) {\n                addresses.add(map(resultSet));\n            }\n        } catch (SQLException e) {\n            throw new DAOException(e);\n        }\n\n        return addresses;\n\n    }\n\n    @Override\n    public Collection findAllByEnduser(Address address) {\n        List<Address> addresses = new ArrayList<>();\n        Object[] values = {\n                address.getEndUser().getId()\n        };\n        try (\n                Connection connection = ds.getConnection();\n                PreparedStatement statement = prepareStatement(connection, SQL_FIND_ALL_BY_ENDUSER, false, values);\n                ResultSet resultSet = statement.executeQuery();\n        ) {\n            while (resultSet.next()) {\n                addresses.add(map(resultSet));\n            }\n        } catch (SQLException e) {\n            throw new DAOException(e);\n        }\n\n        return addresses;\n    }\n\n    public Address find(int id) {\n        return find(SQL_FIND_BY_ADDRESS_ID);\n    }\n\n    private static Address map(ResultSet resultSet) throws SQLException {\n        Address address = new AddressBuilder().setStreet(resultSet.getString(\"addr_street\"))\n                .setCountry(resultSet.getString(\"addr_country\"))\n                .setCity(resultSet.getString(\"addr_city\"))\n                .setStreet(resultSet.getString(\"addr_street\"))\n                .setPostalCode(resultSet.getString(\"addr_postal_code\"))\n                .setPhoneNumber(resultSet.getString(\"addr_phone_number\"))\n                .setRegion(resultSet.getString(\"addr_region\"))\n                .setEndUser(new EndUser(resultSet.getInt(\"usr_id\")))\n                .setId(resultSet.getInt(\"addr_id\"))\n                .createAddress();\n        return address;\n    }\n\n\n    private Address find(String sql, Object... values) throws DAOException {\n        Address address = null;\n\n        try (\n                Connection connection = ds.getConnection();\n                PreparedStatement statement = prepareStatement(connection, sql, false, values);\n                ResultSet resultSet = statement.executeQuery()\n        ) {\n            if (resultSet.next()) {\n                address = map(resultSet);\n            }\n        } catch (SQLException e) {\n            throw new DAOException(e);\n        }\n        return address;\n    }\n\n    @Override\n    public Collection findSingleByEnduser(Address address) {\n        List<Address> addresses = new ArrayList<>();\n        Object[] values = {\n                address.getEndUser().getId()\n        };\n        try (\n                Connection connection = ds.getConnection();\n                PreparedStatement statement = prepareStatement(connection, SQL_FIND_SINGLE_BY_ENDUSER, false, values);\n                ResultSet resultSet = statement.executeQuery();\n        ) {\n            while (resultSet.next()) {\n                addresses.add(map(resultSet));\n            }\n        } catch (SQLException e) {\n            throw new DAOException(e);\n        }\n\n        return addresses;\n    }\n\n    @Override\n    public Collection find(Address address) {\n        return null;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/User/AccountService/dao_layer/implementations/AddressDAOImp.java b/src/main/java/User/AccountService/dao_layer/implementations/AddressDAOImp.java
--- a/src/main/java/User/AccountService/dao_layer/implementations/AddressDAOImp.java	(revision 6674dfa6087447810fbe05a8fc5c8de8e7af41c4)
+++ b/src/main/java/User/AccountService/dao_layer/implementations/AddressDAOImp.java	(date 1673559223661)
@@ -12,7 +12,7 @@
 
 import User.AccountService.beans.Address;
 import User.AccountService.beans.AddressBuilder;
-import User.AccountService.beans.EndUser;
+import User.AccountService.beans.EndUserBuilder;
 import User.AccountService.dao_layer.interfaces.AddressDAO;
 import utils.DAOException;
 
@@ -148,7 +148,7 @@
                 .setPostalCode(resultSet.getString("addr_postal_code"))
                 .setPhoneNumber(resultSet.getString("addr_phone_number"))
                 .setRegion(resultSet.getString("addr_region"))
-                .setEndUser(new EndUser(resultSet.getInt("usr_id")))
+                .setEndUser(new EndUserBuilder().setId(resultSet.getInt("usr_id")).createEndUser())
                 .setId(resultSet.getInt("addr_id"))
                 .createAddress();
         return address;
Index: src/main/java/User/AccountService/beans/CreditCardBuilder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package User.AccountService.beans;\n\npublic class CreditCardBuilder {\n    private int id;\n    private String cvv;\n    private EndUser endUser;\n    private String cardNumber;\n    private String cardHolder;\n    private String expirementDate;\n\n    public CreditCardBuilder setId(int id) {\n        this.id = id;\n        return this;\n    }\n\n    public CreditCardBuilder setCvv(String cvv) {\n        this.cvv = cvv;\n        return this;\n    }\n\n    public CreditCardBuilder setEndUser(EndUser endUser) {\n        this.endUser = endUser;\n        return this;\n    }\n\n    public CreditCardBuilder setCardNumber(String cardNumber) {\n        this.cardNumber = cardNumber;\n        return this;\n    }\n\n    public CreditCardBuilder setCardHolder(String cardHolder) {\n        this.cardHolder = cardHolder;\n        return this;\n    }\n\n    public CreditCardBuilder setExpirementDate(String expirementDate) {\n        this.expirementDate = expirementDate;\n        return this;\n    }\n\n    public CreditCard createCreditCard() {\n        return new CreditCard(id, cvv, endUser, cardNumber, cardHolder, expirementDate);\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/User/AccountService/beans/CreditCardBuilder.java b/src/main/java/User/AccountService/beans/CreditCardBuilder.java
--- a/src/main/java/User/AccountService/beans/CreditCardBuilder.java	(revision 6674dfa6087447810fbe05a8fc5c8de8e7af41c4)
+++ b/src/main/java/User/AccountService/beans/CreditCardBuilder.java	(date 1673560739933)
@@ -1,12 +1,14 @@
 package User.AccountService.beans;
 
+import java.util.Date;
+
 public class CreditCardBuilder {
     private int id;
     private String cvv;
     private EndUser endUser;
     private String cardNumber;
     private String cardHolder;
-    private String expirementDate;
+    private Date expirementDate;
 
     public CreditCardBuilder setId(int id) {
         this.id = id;
@@ -33,7 +35,7 @@
         return this;
     }
 
-    public CreditCardBuilder setExpirementDate(String expirementDate) {
+    public CreditCardBuilder setExpirementDate(Date expirementDate) {
         this.expirementDate = expirementDate;
         return this;
     }
@@ -41,4 +43,9 @@
     public CreditCard createCreditCard() {
         return new CreditCard(id, cvv, endUser, cardNumber, cardHolder, expirementDate);
     }
+
+    public CreditCardBuilder setExpirationDate(Date expirationDate) {
+        this.expirementDate = expirationDate;
+        return this;
+    }
 }
\ No newline at end of file
Index: src/main/java/User/AccountService/service_layer/RegistrationInSessionServlet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/User/AccountService/service_layer/RegistrationInSessionServlet.java b/src/main/java/User/AccountService/service_layer/RegistrationInSessionServlet.java
new file mode 100644
--- /dev/null	(date 1673562419537)
+++ b/src/main/java/User/AccountService/service_layer/RegistrationInSessionServlet.java	(date 1673562419537)
@@ -0,0 +1,44 @@
+package User.AccountService.service_layer;
+
+import User.AccountService.beans.EndUser;
+import User.AccountService.beans.EndUserBuilder;
+import User.AccountService.dao_layer.interfaces.EndUserDAO;
+import utils.AbstractDAOFactory;
+
+import javax.servlet.RequestDispatcher;
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import javax.servlet.http.HttpSession;
+import java.io.IOException;
+
+public class RegistrationInSessionServlet extends HttpServlet {
+
+    private AbstractDAOFactory factory = AbstractDAOFactory.getDAOFactory(AbstractDAOFactory.JDBC);
+    private EndUserDAO dao = factory.getEndUserDAO();
+
+
+    @Override
+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
+        doPost(request, response);
+
+    }
+
+    @Override
+    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
+
+        response.setContentType("text/html");
+        EndUser user = new EndUserBuilder()
+                .setEmail(request.getParameter("username"))
+                .setPassword(request.getParameter("password"))
+                .createEndUser();
+
+        HttpSession session = request.getSession();
+        session.setAttribute("user", user);
+        RequestDispatcher dispatcher = this.getServletContext().getRequestDispatcher(response.encodeURL("/MerchandisingView/homepage.jsp"));
+        dispatcher.forward(request, response);
+
+    }
+
+}
Index: src/main/java/User/AccountService/beans/CreditCard.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package User.AccountService.beans;\n\npublic class CreditCard {\n    private int id;\n    private String cvv;\n    private EndUser endUser;\n    private String cardNumber;\n    private String cardHolder;\n    private String expirementDate;\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public String getCvv() {\n        return cvv;\n    }\n\n    public void setCvv(String cvv) {\n        this.cvv = cvv;\n    }\n\n    public CreditCard() {\n    }\n\n    public void setEndUser(EndUser endUser) {\n        this.endUser = this.endUser;\n    }\n\n    public String getExpirementDate() {\n        return this.expirementDate;\n    }\n    public void setExpirementDate(String expirementDate) {\n        this.expirementDate = expirementDate;\n    }\n    public String getCardNumber() {\n        return cardNumber;\n    }\n\n    public void setCardNumber(String cardNumber) {\n        this.cardNumber = cardNumber;\n    }\n\n    public CreditCard(int id, String cvv, EndUser endUser, String cardNumber, String cardHolder, String expirementDate) {\n        this.id = id;\n        this.cvv = cvv;\n        this.endUser = endUser;\n        this.cardNumber = cardNumber;\n        this.cardHolder = cardHolder;\n        this.expirementDate = expirementDate;\n    }\n\n    public EndUser getEndUser() {\n        return endUser;\n    }\n\n    public String getCardHolder() {\n        return cardHolder;\n    }\n\n    public void setCardHolder(String cardHolder) {\n        this.cardHolder = cardHolder;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/User/AccountService/beans/CreditCard.java b/src/main/java/User/AccountService/beans/CreditCard.java
--- a/src/main/java/User/AccountService/beans/CreditCard.java	(revision 6674dfa6087447810fbe05a8fc5c8de8e7af41c4)
+++ b/src/main/java/User/AccountService/beans/CreditCard.java	(date 1673560027390)
@@ -1,12 +1,14 @@
 package User.AccountService.beans;
 
+import java.util.Date;
+
 public class CreditCard {
     private int id;
     private String cvv;
     private EndUser endUser;
     private String cardNumber;
     private String cardHolder;
-    private String expirementDate;
+    private Date expirementDate;
 
     public int getId() {
         return id;
@@ -31,10 +33,10 @@
         this.endUser = this.endUser;
     }
 
-    public String getExpirementDate() {
+    public Date getExpirementDate() {
         return this.expirementDate;
     }
-    public void setExpirementDate(String expirementDate) {
+    public void setExpirementDate(Date expirementDate) {
         this.expirementDate = expirementDate;
     }
     public String getCardNumber() {
@@ -45,7 +47,7 @@
         this.cardNumber = cardNumber;
     }
 
-    public CreditCard(int id, String cvv, EndUser endUser, String cardNumber, String cardHolder, String expirementDate) {
+    public CreditCard(int id, String cvv, EndUser endUser, String cardNumber, String cardHolder, Date expirementDate) {
         this.id = id;
         this.cvv = cvv;
         this.endUser = endUser;
Index: src/main/java/User/AccountService/service_layer/LogoutEndUserServlet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package User.AccountService.service_layer;\n\nimport User.AccountService.dao_layer.implementations.EndUserDAOImp;\nimport User.AccountService.dao_layer.interfaces.EndUserDAO;\n\nimport javax.servlet.RequestDispatcher;\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.sql.DataSource;\nimport java.io.IOException;\n\n@WebServlet(\"/LogoutEndUserServlet\")\npublic class LogoutEndUserServlet extends HttpServlet {\n\n    EndUserDAO dao;\n    @Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        request.getSession().invalidate();\n        RequestDispatcher dispatcher = this.getServletContext().getRequestDispatcher(response.encodeURL(\"/MerchandisingView/home.jsp\"));\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/User/AccountService/service_layer/LogoutEndUserServlet.java b/src/main/java/User/AccountService/service_layer/LogoutEndUserServlet.java
--- a/src/main/java/User/AccountService/service_layer/LogoutEndUserServlet.java	(revision 6674dfa6087447810fbe05a8fc5c8de8e7af41c4)
+++ b/src/main/java/User/AccountService/service_layer/LogoutEndUserServlet.java	(date 1673556481938)
@@ -26,4 +26,5 @@
         request.getSession().invalidate();
         RequestDispatcher dispatcher = this.getServletContext().getRequestDispatcher(response.encodeURL("/MerchandisingView/home.jsp"));
     }
+
 }
\ No newline at end of file
Index: src/main/java/User/AccountService/beans/EndUserBuilder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/User/AccountService/beans/EndUserBuilder.java b/src/main/java/User/AccountService/beans/EndUserBuilder.java
new file mode 100644
--- /dev/null	(date 1673560752218)
+++ b/src/main/java/User/AccountService/beans/EndUserBuilder.java	(date 1673560752218)
@@ -0,0 +1,65 @@
+package User.AccountService.beans;
+
+import java.util.Date;
+import java.util.Set;
+
+public class EndUserBuilder {
+    private int id;
+    private String name;
+    private String password;
+    private String surname;
+    private String email;
+    private String phoneNumber;
+    private Date birthdate;
+    private Set addresses;
+    private Set cards;
+
+    public EndUserBuilder setId(int id) {
+        this.id = id;
+        return this;
+    }
+
+    public EndUserBuilder setName(String name) {
+        this.name = name;
+        return this;
+    }
+
+    public EndUserBuilder setPassword(String password) {
+        this.password = password;
+        return this;
+    }
+
+    public EndUserBuilder setSurname(String surname) {
+        this.surname = surname;
+        return this;
+    }
+
+    public EndUserBuilder setEmail(String email) {
+        this.email = email;
+        return this;
+    }
+
+    public EndUserBuilder setPhoneNumber(String phoneNumber) {
+        this.phoneNumber = phoneNumber;
+        return this;
+    }
+
+    public EndUserBuilder setBirthdate(Date birthdate) {
+        this.birthdate = birthdate;
+        return this;
+    }
+
+    public EndUserBuilder setAddresses(Set addresses) {
+        this.addresses = addresses;
+        return this;
+    }
+
+    public EndUserBuilder setCards(Set cards) {
+        this.cards = cards;
+        return this;
+    }
+
+    public EndUser createEndUser() {
+        return new EndUser(id);
+    }
+}
\ No newline at end of file
Index: src/main/java/context/MainContext.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package context;\n\n\nimport javax.naming.Context;\nimport javax.naming.InitialContext;\nimport javax.naming.NamingException;\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletContextEvent;\nimport javax.servlet.ServletContextListener;\nimport javax.servlet.annotation.WebListener;\nimport javax.sql.DataSource;\nimport java.sql.Connection;\nimport java.sql.SQLException;\n\n\n@WebListener\npublic class MainContext implements ServletContextListener {\n\tpublic void contextInitialized(ServletContextEvent event) { \n\n\t\tServletContext context = event.getServletContext();\n\n\t\tDataSource ds = null; \n\t\ttry {\n\t\t\tContext initCtx = new InitialContext();\n\t\t\tContext envCtx = (Context) initCtx.lookup(\"java:comp/env\"); \n\n\t\t\tds = (DataSource) envCtx.lookup(\"jdbc/manga-up\");\n\n\t\t\ttry {\n\t\t\t\tConnection con = ds.getConnection();\n\t\t\t} catch (SQLException e){\n\t\t\t\tSystem.out.println(e);\n\t\t\t}\n\n\t\t\tcontext.setAttribute(\"Datasource\", ds);\n\t\t} catch (NamingException e) {\n\t\t\tSystem.out.println(e.getMessage());\n\t\t}\n\n\t\tcontext.setAttribute(\"DataSource\", ds);\n\t}\n\n\tpublic void contextDestroyed(ServletContextEvent event) {\n\t\tServletContext context = event.getServletContext();\n\n\t\tcontext.removeAttribute(\"DataSource\");\n\t}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/context/MainContext.java b/src/main/java/context/MainContext.java
--- a/src/main/java/context/MainContext.java	(revision 6674dfa6087447810fbe05a8fc5c8de8e7af41c4)
+++ b/src/main/java/context/MainContext.java	(date 1673555948310)
@@ -32,12 +32,13 @@
 				System.out.println(e);
 			}
 
-			context.setAttribute("Datasource", ds);
+			context.setAttribute("DataSource", ds);
 		} catch (NamingException e) {
 			System.out.println(e.getMessage());
 		}
 
 		context.setAttribute("DataSource", ds);
+
 	}
 
 	public void contextDestroyed(ServletContextEvent event) {
Index: src/main/webapp/profile_view/dashboard_indirizzi.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><%--\n  Created by IntelliJ IDEA.\n  User: tommasosorrentino\n  Date: 09/01/23\n  Time: 21:24\n  To change this template use File | Settings | File Templates.\n--%>\n\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n\n<html>\n<head>\n    <title>Indirizzi</title>\n</head>\n<body>\n<c:forEach items=\"${addresses}\" var=\"address\">\n\n    <p>${address.country}, ${address.city}, ${address.street}, ${address.postalCode}, ${address.phoneNumber}, ${address.region} </p><br/>\n\n</c:forEach>\n\n\n\n</body>\n</html>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/webapp/profile_view/dashboard_indirizzi.jsp b/src/main/webapp/profile_view/dashboard_indirizzi.jsp
--- a/src/main/webapp/profile_view/dashboard_indirizzi.jsp	(revision 6674dfa6087447810fbe05a8fc5c8de8e7af41c4)
+++ b/src/main/webapp/profile_view/dashboard_indirizzi.jsp	(date 1673556773214)
@@ -14,10 +14,23 @@
     <title>Indirizzi</title>
 </head>
 <body>
+
+
+
+<c:if test="${addresses == null}">
+    <p> Non hai nessun indirizzo registrane uno.</p>
+</c:if>
+
 <c:forEach items="${addresses}" var="address">
-
-    <p>${address.country}, ${address.city}, ${address.street}, ${address.postalCode}, ${address.phoneNumber}, ${address.region} </p><br/>
+    <p>${address.country}, ${address.city}, ${address.street}, ${address.postalCode}, ${address.phoneNumber}, ${address.region} </p> <br/>
 
+<form action="/AddressDeleteServlet">
+
+    <input type="hidden" name="address_id" value=${address.id}/>
+    <input type="submit" value="deny" name="act" id="box_button" class="accept">
+</form>
+
+
 </c:forEach>
 
 
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\n  <component name=\"FrameworkDetectionExcludesConfiguration\">\n    <file type=\"web\" url=\"file://$PROJECT_DIR$\" />\n  </component>\n  <component name=\"MavenProjectsManager\">\n    <option name=\"originalFiles\">\n      <list>\n        <option value=\"$PROJECT_DIR$/pom.xml\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_19\" default=\"true\" project-jdk-name=\"17\" project-jdk-type=\"JavaSDK\">\n    <output url=\"file://$PROJECT_DIR$/out\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 6674dfa6087447810fbe05a8fc5c8de8e7af41c4)
+++ b/.idea/misc.xml	(date 1673554203097)
@@ -11,7 +11,7 @@
       </list>
     </option>
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_19" default="true" project-jdk-name="17" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" default="true" project-jdk-name="17" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
Index: src/main/webapp/profile_view/dashboard_carte_di_credito.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><%--\n  Created by IntelliJ IDEA.\n  User: tommasosorrentino\n  Date: 09/01/23\n  Time: 21:24\n  To change this template use File | Settings | File Templates.\n--%>\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n<html>\n<head>\n    <title>Title</title>\n</head>\n<body>\n\n<a href=\"${pageContext.request.contextPath}/profile_view/form_carta_credito.jsp\">Servizio di aggiunta di carta di credito.</a>\n\n<c:if test=\"${empty cards}\">\n    <p> Non hai nessuna carta di credito. </p>\n</c:if>\n\n<c:forEach items=\"${cards}\" var=\"card\">\n    <p>Numero Carta: ${card.cardNumber}, Proprietario: ${card.cardHolder}, Data di scadenza:${card.expirementDate} </p><br/>\n</c:forEach>\n\n</body>\n</html>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/webapp/profile_view/dashboard_carte_di_credito.jsp b/src/main/webapp/profile_view/dashboard_carte_di_credito.jsp
--- a/src/main/webapp/profile_view/dashboard_carte_di_credito.jsp	(revision 6674dfa6087447810fbe05a8fc5c8de8e7af41c4)
+++ b/src/main/webapp/profile_view/dashboard_carte_di_credito.jsp	(date 1673557061772)
@@ -21,7 +21,11 @@
 
 <c:forEach items="${cards}" var="card">
     <p>Numero Carta: ${card.cardNumber}, Proprietario: ${card.cardHolder}, Data di scadenza:${card.expirementDate} </p><br/>
+<form action="/CreditCardDeleteServlet">
+    <input type="hidden" name="credit_card_id" value=${card.id}/>
+    <input type="submit" value="deny" name="act" id="box_button" class="accept">
+</form>
+
 </c:forEach>
-
 </body>
 </html>
Index: src/main/java/User/AccountService/service_layer/CreditCardDeleteServlet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package User.AccountService.service_layer;\n\nimport User.AccountService.dao_layer.interfaces.CreditCardDAO;\nimport utils.AbstractDAOFactory;\n\n\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport javax.servlet.annotation.*;\nimport java.io.IOException;\n\n@WebServlet(name = \"CreditCardDeleteServlet\", value = \"/CreditCardDeleteServlet\")\npublic class CreditCardDeleteServlet extends HttpServlet {\n    private AbstractDAOFactory factory = AbstractDAOFactory.getDAOFactory(AbstractDAOFactory.JDBC);\n    private CreditCardDAO dao = factory.getCreditCardDAO();\n    @Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        \n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/User/AccountService/service_layer/CreditCardDeleteServlet.java b/src/main/java/User/AccountService/service_layer/CreditCardDeleteServlet.java
--- a/src/main/java/User/AccountService/service_layer/CreditCardDeleteServlet.java	(revision 6674dfa6087447810fbe05a8fc5c8de8e7af41c4)
+++ b/src/main/java/User/AccountService/service_layer/CreditCardDeleteServlet.java	(date 1673556966792)
@@ -1,5 +1,6 @@
 package User.AccountService.service_layer;
 
+import User.AccountService.beans.CreditCard;
 import User.AccountService.dao_layer.interfaces.CreditCardDAO;
 import utils.AbstractDAOFactory;
 
@@ -20,6 +21,10 @@
 
     @Override
     protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
-        
+        int id = Integer.valueOf(request.getParameter("cardNumber"));
+        CreditCard card = new CreditCard();
+        card.setId(id);
+        dao.delete(card);
+        response.sendRedirect("CreditCardListServlet");
     }
 }
